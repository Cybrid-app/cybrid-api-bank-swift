//
// InternalExchangeSettlementExpectedPaymentBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc public class InternalExchangeSettlementExpectedPaymentBankModel: NSObject, Codable, JSONEncodable {

    public enum InternalAccountTypeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case wallet = "internal_wallet"
        case bankAccount = "internal_bank_account"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum StateBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case storing = "storing"
        case pendingCreated = "pending__created"
        case pendingTransactionsClaimed = "pending__transactions_claimed"
        case notApproved = "not_approved"
        case inProgress = "in_progress"
        case notOwed = "not_owed"
        case amountIncorrect = "amount_incorrect"
        case cancelled = "cancelled"
        case received = "received"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** Auto-generated unique identifier for the exchange settlement expected payment. */
    public var guid: String?
    /** The identifier of the exchange settlement obligation that this payment is associated with. */
    public var exchangeSettlementObligationGuid: String?
    /** The sequence number of the expected payment */
    public var sequenceNumber: Int?
    public var sequenceNumberNum: NSNumber? {
        get {
            return sequenceNumber as NSNumber?
        }
    }
    /** The amount expected to be received as part of this payment. */
    public var paymentAmount: Int?
    public var paymentAmountNum: NSNumber? {
        get {
            return paymentAmount as NSNumber?
        }
    }
    /** The identifier of the internal account that is expected to originate the payment. */
    public var internalAccountGuid: String?
    /** The type of the internal account that is expected to originate the payment. */
    public var internalAccountType: InternalAccountTypeBankModel?
    /** The exchange settlement expected payment's state */
    public var state: StateBankModel?
    /** ISO8601 datetime the exchange settlement expected payment was created at. */
    public var createdAt: Date?

    public init(guid: String? = nil, exchangeSettlementObligationGuid: String? = nil, sequenceNumber: Int? = nil, paymentAmount: Int? = nil, internalAccountGuid: String? = nil, internalAccountType: InternalAccountTypeBankModel? = nil, state: StateBankModel? = nil, createdAt: Date? = nil) {
        self.guid = guid
        self.exchangeSettlementObligationGuid = exchangeSettlementObligationGuid
        self.sequenceNumber = sequenceNumber
        self.paymentAmount = paymentAmount
        self.internalAccountGuid = internalAccountGuid
        self.internalAccountType = internalAccountType
        self.state = state
        self.createdAt = createdAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case guid
        case exchangeSettlementObligationGuid = "exchange_settlement_obligation_guid"
        case sequenceNumber = "sequence_number"
        case paymentAmount = "payment_amount"
        case internalAccountGuid = "internal_account_guid"
        case internalAccountType = "internal_account_type"
        case state
        case createdAt = "created_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(guid, forKey: .guid)
        try container.encodeIfPresent(exchangeSettlementObligationGuid, forKey: .exchangeSettlementObligationGuid)
        try container.encodeIfPresent(sequenceNumber, forKey: .sequenceNumber)
        try container.encodeIfPresent(paymentAmount, forKey: .paymentAmount)
        try container.encodeIfPresent(internalAccountGuid, forKey: .internalAccountGuid)
        try container.encodeIfPresent(internalAccountType, forKey: .internalAccountType)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
    }
}

