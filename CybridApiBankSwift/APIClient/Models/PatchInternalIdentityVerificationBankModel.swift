//
// PatchInternalIdentityVerificationBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PatchInternalIdentityVerificationBankModel: Codable, JSONEncodable, Hashable {

    public enum OutcomeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case passed = "passed"
        case failed = "failed"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum FailureCodesBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case requestedFailure = "requested_failure"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** ISO8601 datetime the identity verification was started at. */
    public var startedAt: Date?
    /** The GUID of the identity workflow backing the verification. */
    public var identityWorkflowGuid: String?
    /** ISO8601 datetime the identity verification was completed at. */
    public var completedAt: Date?
    /** The outcome of the identity verification. */
    public var outcome: OutcomeBankModel?
    /** The reason codes explaining the outcome. */
    public var failureCodes: [FailureCodesBankModel]?

    public init(startedAt: Date? = nil, identityWorkflowGuid: String? = nil, completedAt: Date? = nil, outcome: OutcomeBankModel? = nil, failureCodes: [FailureCodesBankModel]? = nil) {
        self.startedAt = startedAt
        self.identityWorkflowGuid = identityWorkflowGuid
        self.completedAt = completedAt
        self.outcome = outcome
        self.failureCodes = failureCodes
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case startedAt = "started_at"
        case identityWorkflowGuid = "identity_workflow_guid"
        case completedAt = "completed_at"
        case outcome
        case failureCodes = "failure_codes"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(startedAt, forKey: .startedAt)
        try container.encodeIfPresent(identityWorkflowGuid, forKey: .identityWorkflowGuid)
        try container.encodeIfPresent(completedAt, forKey: .completedAt)
        try container.encodeIfPresent(outcome, forKey: .outcome)
        try container.encodeIfPresent(failureCodes, forKey: .failureCodes)
    }
}

