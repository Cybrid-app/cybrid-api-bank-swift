//
// PlanBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/**  */
public struct PlanBankModel: Codable, JSONEncodable, Hashable {

    /** Auto-generated unique identifier for the entity. */
    public var guid: String
    /** The type of product the plan is for; one of remittance. */
    public var type: String
    /** The unique identifier for the bank. */
    public var bankGuid: String?
    /** The unique identifier for the customer. */
    public var customerGuid: String?
    /** ISO8601 datetime the record was created at. */
    public var createdAt: Date
    /** ISO8601 datetime the record was last updated at. */
    public var updatedAt: Date
    /** ISO8601 datetime the plan will expire at. */
    public var expiresAt: Date
    /** The state of the plan; one of storing, planning, completed, or failed. */
    public var state: String
    /** The failure code for failed plans. */
    public var failureCode: String?
    public var sourceAccount: AccountAssociationBankModel
    public var destinationAccount: AccountAssociationBankModel
    /** The stages of the plan. */
    public var stages: [StageBankModel]
    /** The fees associated with the plan. */
    public var fees: [FeeAssociationBankModel]
    public var travelRuleInfo: PlanTravelRuleInfoBankModel

    public init(guid: String, type: String, bankGuid: String? = nil, customerGuid: String? = nil, createdAt: Date, updatedAt: Date, expiresAt: Date, state: String, failureCode: String? = nil, sourceAccount: AccountAssociationBankModel, destinationAccount: AccountAssociationBankModel, stages: [StageBankModel], fees: [FeeAssociationBankModel], travelRuleInfo: PlanTravelRuleInfoBankModel) {
        self.guid = guid
        self.type = type
        self.bankGuid = bankGuid
        self.customerGuid = customerGuid
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.expiresAt = expiresAt
        self.state = state
        self.failureCode = failureCode
        self.sourceAccount = sourceAccount
        self.destinationAccount = destinationAccount
        self.stages = stages
        self.fees = fees
        self.travelRuleInfo = travelRuleInfo
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case guid
        case type
        case bankGuid = "bank_guid"
        case customerGuid = "customer_guid"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case expiresAt = "expires_at"
        case state
        case failureCode = "failure_code"
        case sourceAccount = "source_account"
        case destinationAccount = "destination_account"
        case stages
        case fees
        case travelRuleInfo = "travel_rule_info"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(guid, forKey: .guid)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(bankGuid, forKey: .bankGuid)
        try container.encodeIfPresent(customerGuid, forKey: .customerGuid)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encode(expiresAt, forKey: .expiresAt)
        try container.encode(state, forKey: .state)
        try container.encodeIfPresent(failureCode, forKey: .failureCode)
        try container.encode(sourceAccount, forKey: .sourceAccount)
        try container.encode(destinationAccount, forKey: .destinationAccount)
        try container.encode(stages, forKey: .stages)
        try container.encode(fees, forKey: .fees)
        try container.encode(travelRuleInfo, forKey: .travelRuleInfo)
    }
}

