//
// InternalCryptoFundingDepositTransferBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct InternalCryptoFundingDepositTransferBankModel: Codable, JSONEncodable, Hashable {

    public var guid: String?
    public var transferType: String?
    public var organizationGuid: String?
    public var bankGuid: String?
    public var customerGuid: String?
    public var amount: Int?
    public var amountAsset: String?
    public var bankFee: Int?
    public var bankFeeAsset: String?
    public var platformFee: Int?
    public var platformFeeAsset: String?
    public var direction: String?
    public var state: String?
    public var tradingAccountGuid: String?
    public var tradingAccountOrganizationGuid: String?
    public var tradingAccountBankGuid: String?
    public var tradingAccountCustomerGuid: String?
    public var principalAccountGuid: String?
    public var bankFeeAccountGuid: String?
    public var bankFeeAccountOrganizationGuid: String?
    public var bankFeeAccountBankGuid: String?
    public var bankFeeAccountCustomerGuid: String?
    public var platformFeeAccountGuid: String?

    public init(guid: String? = nil, transferType: String? = nil, organizationGuid: String? = nil, bankGuid: String? = nil, customerGuid: String? = nil, amount: Int? = nil, amountAsset: String? = nil, bankFee: Int? = nil, bankFeeAsset: String? = nil, platformFee: Int? = nil, platformFeeAsset: String? = nil, direction: String? = nil, state: String? = nil, tradingAccountGuid: String? = nil, tradingAccountOrganizationGuid: String? = nil, tradingAccountBankGuid: String? = nil, tradingAccountCustomerGuid: String? = nil, principalAccountGuid: String? = nil, bankFeeAccountGuid: String? = nil, bankFeeAccountOrganizationGuid: String? = nil, bankFeeAccountBankGuid: String? = nil, bankFeeAccountCustomerGuid: String? = nil, platformFeeAccountGuid: String? = nil) {
        self.guid = guid
        self.transferType = transferType
        self.organizationGuid = organizationGuid
        self.bankGuid = bankGuid
        self.customerGuid = customerGuid
        self.amount = amount
        self.amountAsset = amountAsset
        self.bankFee = bankFee
        self.bankFeeAsset = bankFeeAsset
        self.platformFee = platformFee
        self.platformFeeAsset = platformFeeAsset
        self.direction = direction
        self.state = state
        self.tradingAccountGuid = tradingAccountGuid
        self.tradingAccountOrganizationGuid = tradingAccountOrganizationGuid
        self.tradingAccountBankGuid = tradingAccountBankGuid
        self.tradingAccountCustomerGuid = tradingAccountCustomerGuid
        self.principalAccountGuid = principalAccountGuid
        self.bankFeeAccountGuid = bankFeeAccountGuid
        self.bankFeeAccountOrganizationGuid = bankFeeAccountOrganizationGuid
        self.bankFeeAccountBankGuid = bankFeeAccountBankGuid
        self.bankFeeAccountCustomerGuid = bankFeeAccountCustomerGuid
        self.platformFeeAccountGuid = platformFeeAccountGuid
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case guid
        case transferType = "transfer_type"
        case organizationGuid = "organization_guid"
        case bankGuid = "bank_guid"
        case customerGuid = "customer_guid"
        case amount
        case amountAsset = "amount_asset"
        case bankFee = "bank_fee"
        case bankFeeAsset = "bank_fee_asset"
        case platformFee = "platform_fee"
        case platformFeeAsset = "platform_fee_asset"
        case direction
        case state
        case tradingAccountGuid = "trading_account_guid"
        case tradingAccountOrganizationGuid = "trading_account_organization_guid"
        case tradingAccountBankGuid = "trading_account_bank_guid"
        case tradingAccountCustomerGuid = "trading_account_customer_guid"
        case principalAccountGuid = "principal_account_guid"
        case bankFeeAccountGuid = "bank_fee_account_guid"
        case bankFeeAccountOrganizationGuid = "bank_fee_account_organization_guid"
        case bankFeeAccountBankGuid = "bank_fee_account_bank_guid"
        case bankFeeAccountCustomerGuid = "bank_fee_account_customer_guid"
        case platformFeeAccountGuid = "platform_fee_account_guid"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(guid, forKey: .guid)
        try container.encodeIfPresent(transferType, forKey: .transferType)
        try container.encodeIfPresent(organizationGuid, forKey: .organizationGuid)
        try container.encodeIfPresent(bankGuid, forKey: .bankGuid)
        try container.encodeIfPresent(customerGuid, forKey: .customerGuid)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(amountAsset, forKey: .amountAsset)
        try container.encodeIfPresent(bankFee, forKey: .bankFee)
        try container.encodeIfPresent(bankFeeAsset, forKey: .bankFeeAsset)
        try container.encodeIfPresent(platformFee, forKey: .platformFee)
        try container.encodeIfPresent(platformFeeAsset, forKey: .platformFeeAsset)
        try container.encodeIfPresent(direction, forKey: .direction)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(tradingAccountGuid, forKey: .tradingAccountGuid)
        try container.encodeIfPresent(tradingAccountOrganizationGuid, forKey: .tradingAccountOrganizationGuid)
        try container.encodeIfPresent(tradingAccountBankGuid, forKey: .tradingAccountBankGuid)
        try container.encodeIfPresent(tradingAccountCustomerGuid, forKey: .tradingAccountCustomerGuid)
        try container.encodeIfPresent(principalAccountGuid, forKey: .principalAccountGuid)
        try container.encodeIfPresent(bankFeeAccountGuid, forKey: .bankFeeAccountGuid)
        try container.encodeIfPresent(bankFeeAccountOrganizationGuid, forKey: .bankFeeAccountOrganizationGuid)
        try container.encodeIfPresent(bankFeeAccountBankGuid, forKey: .bankFeeAccountBankGuid)
        try container.encodeIfPresent(bankFeeAccountCustomerGuid, forKey: .bankFeeAccountCustomerGuid)
        try container.encodeIfPresent(platformFeeAccountGuid, forKey: .platformFeeAccountGuid)
    }
}

