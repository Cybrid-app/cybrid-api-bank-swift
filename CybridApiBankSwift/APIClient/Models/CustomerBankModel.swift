//
// CustomerBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CustomerBankModel: Codable, JSONEncodable, Hashable {

    public enum TypeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case business = "business"
        case individual = "individual"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum StateBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case storing = "storing"
        case unverified = "unverified"
        case verified = "verified"
        case rejected = "rejected"
        case frozen = "frozen"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** Auto-generated unique identifier for the customer. */
    public var guid: String?
    /** Auto-generated unique identifier for the customer's bank. */
    public var bankGuid: String?
    /** The customer's type. */
    public var type: TypeBankModel?
    /** ISO8601 datetime the record was created at. */
    public var createdAt: Date?
    /** ISO8601 datetime the record was last updated at. */
    public var updatedAt: Date?
    /** The customer's state. */
    public var state: StateBankModel?
    public var name: CustomerNameBankModel?
    public var address: CustomerAddressBankModel?
    /** The customer's DOB. Only available for GET operations when 'include_pii' is set. */
    public var dateOfBirth: Date?
    /** The customer's phone number. Only available for GET operations when 'include_pii' is set. */
    public var phoneNumber: String?
    /** The customer's email address. Only available for GET operations when 'include_pii' is set. */
    public var emailAddress: String?
    /** The labels associated with the customer. */
    public var labels: [String]?
    /** The verification checks associated with the customer. */
    public var verificationChecks: [VerificationCheckBankModel]?

    public init(guid: String? = nil, bankGuid: String? = nil, type: TypeBankModel? = nil, createdAt: Date? = nil, updatedAt: Date? = nil, state: StateBankModel? = nil, name: CustomerNameBankModel? = nil, address: CustomerAddressBankModel? = nil, dateOfBirth: Date? = nil, phoneNumber: String? = nil, emailAddress: String? = nil, labels: [String]? = nil, verificationChecks: [VerificationCheckBankModel]? = nil) {
        self.guid = guid
        self.bankGuid = bankGuid
        self.type = type
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.state = state
        self.name = name
        self.address = address
        self.dateOfBirth = dateOfBirth
        self.phoneNumber = phoneNumber
        self.emailAddress = emailAddress
        self.labels = labels
        self.verificationChecks = verificationChecks
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case guid
        case bankGuid = "bank_guid"
        case type
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case state
        case name
        case address
        case dateOfBirth = "date_of_birth"
        case phoneNumber = "phone_number"
        case emailAddress = "email_address"
        case labels
        case verificationChecks = "verification_checks"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(guid, forKey: .guid)
        try container.encodeIfPresent(bankGuid, forKey: .bankGuid)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(dateOfBirth, forKey: .dateOfBirth)
        try container.encodeIfPresent(phoneNumber, forKey: .phoneNumber)
        try container.encodeIfPresent(emailAddress, forKey: .emailAddress)
        try container.encodeIfPresent(labels, forKey: .labels)
        try container.encodeIfPresent(verificationChecks, forKey: .verificationChecks)
    }
}

