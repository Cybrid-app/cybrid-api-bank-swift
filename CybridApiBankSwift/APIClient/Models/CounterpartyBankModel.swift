//
// CounterpartyBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CounterpartyBankModel: Codable, JSONEncodable, Hashable {

    /** Auto-generated unique identifier for the counterparty. */
    public var guid: String?
    /** The counterparty type; one of business or individual. */
    public var type: String?
    /** Auto-generated unique identifier for the counterparty's bank. */
    public var bankGuid: String?
    /** Auto-generated unique identifier for the counterparty's customer. */
    public var customerGuid: String?
    /** ISO8601 datetime the record was created at. */
    public var createdAt: Date?
    /** ISO8601 datetime the record was last updated at. */
    public var updatedAt: Date?
    /** The counterparty state; one of storing, unverified, verified, or rejected. */
    public var state: String?
    public var name: CounterpartyNameBankModel?
    public var address: CounterpartyAddressBankModel?
    /** The counterparty's aliases. Only available for GET operations when 'include_pii' is set. */
    public var aliases: [CounterpartyAliasesInnerBankModel]?
    /** The counterparty's DOB. Only available for GET operations when 'include_pii' is set. */
    public var dateOfBirth: Date?
    /** The labels associated with the counterparty. */
    public var labels: [String]?
    /** The compliance decisions associated with the counterparty. */
    public var complianceDecisions: [ComplianceDecisionBankModel]?
    /** Deprecated; use compliance_decisions instead. */
    public var verificationChecks: [ComplianceDecisionBankModel]?

    public init(guid: String? = nil, type: String? = nil, bankGuid: String? = nil, customerGuid: String? = nil, createdAt: Date? = nil, updatedAt: Date? = nil, state: String? = nil, name: CounterpartyNameBankModel? = nil, address: CounterpartyAddressBankModel? = nil, aliases: [CounterpartyAliasesInnerBankModel]? = nil, dateOfBirth: Date? = nil, labels: [String]? = nil, complianceDecisions: [ComplianceDecisionBankModel]? = nil, verificationChecks: [ComplianceDecisionBankModel]? = nil) {
        self.guid = guid
        self.type = type
        self.bankGuid = bankGuid
        self.customerGuid = customerGuid
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.state = state
        self.name = name
        self.address = address
        self.aliases = aliases
        self.dateOfBirth = dateOfBirth
        self.labels = labels
        self.complianceDecisions = complianceDecisions
        self.verificationChecks = verificationChecks
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case guid
        case type
        case bankGuid = "bank_guid"
        case customerGuid = "customer_guid"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case state
        case name
        case address
        case aliases
        case dateOfBirth = "date_of_birth"
        case labels
        case complianceDecisions = "compliance_decisions"
        case verificationChecks = "verification_checks"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(guid, forKey: .guid)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(bankGuid, forKey: .bankGuid)
        try container.encodeIfPresent(customerGuid, forKey: .customerGuid)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(aliases, forKey: .aliases)
        try container.encodeIfPresent(dateOfBirth, forKey: .dateOfBirth)
        try container.encodeIfPresent(labels, forKey: .labels)
        try container.encodeIfPresent(complianceDecisions, forKey: .complianceDecisions)
        try container.encodeIfPresent(verificationChecks, forKey: .verificationChecks)
    }
}

