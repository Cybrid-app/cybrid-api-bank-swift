//
// ActivityLimitBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ActivityLimitBankModel: Codable, JSONEncodable, Hashable {

    /** The type of the limit; one of rolling, daily, weekly, or monthly. */
    public var type: String?
    /** The name of the limit. */
    public var name: String?
    /** The asset code for the limit. */
    public var asset: String?
    /** The limit amount for the asset. */
    public var amount: Int?
    /** The limit interval in seconds for the asset. */
    public var interval: Int?
    /** The activities associated with the limit. */
    public var activities: [String]?
    /** The sides associated with the limit. */
    public var sides: [String]?

    public init(type: String? = nil, name: String? = nil, asset: String? = nil, amount: Int? = nil, interval: Int? = nil, activities: [String]? = nil, sides: [String]? = nil) {
        self.type = type
        self.name = name
        self.asset = asset
        self.amount = amount
        self.interval = interval
        self.activities = activities
        self.sides = sides
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case name
        case asset
        case amount
        case interval
        case activities
        case sides
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(asset, forKey: .asset)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(interval, forKey: .interval)
        try container.encodeIfPresent(activities, forKey: .activities)
        try container.encodeIfPresent(sides, forKey: .sides)
    }
}

