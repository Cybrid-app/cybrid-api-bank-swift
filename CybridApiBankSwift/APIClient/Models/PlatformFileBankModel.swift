//
// PlatformFileBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PlatformFileBankModel: Codable, JSONEncodable, Hashable {

    public enum StateBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case storing = "storing"
        case completed = "completed"
        case failed = "failed"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** The unique identifier for the file. */
    public var guid: String?
    /** The file type; one of drivers_license_front, drivers_license_back, passport, visa, identification_card, residence_card, selfie, selfie_video, selfie_left, selfie_right, utility_bill, bank_statement, property_tax, tax_document, ein_letter, incorporation_certificate, persona_inquiry_report, or persona_inquiry_export. */
    public var fileType: String?
    /** The media type; one of image/jpeg, image/png, application/pdf, application/json, or video/mp4. */
    public var contentType: String?
    /** The ISO8601 datetime the file was completed at. */
    public var completedAt: Date?
    /** The ISO8601 datetime the file failed at. */
    public var failedAt: Date?
    /** The state of the file. One of storing, completed, or failed. */
    public var state: StateBankModel?
    /** The failure code for failed files. */
    public var failureCode: String?

    public init(guid: String? = nil, fileType: String? = nil, contentType: String? = nil, completedAt: Date? = nil, failedAt: Date? = nil, state: StateBankModel? = nil, failureCode: String? = nil) {
        self.guid = guid
        self.fileType = fileType
        self.contentType = contentType
        self.completedAt = completedAt
        self.failedAt = failedAt
        self.state = state
        self.failureCode = failureCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case guid
        case fileType = "file_type"
        case contentType = "content_type"
        case completedAt = "completed_at"
        case failedAt = "failed_at"
        case state
        case failureCode = "failure_code"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(guid, forKey: .guid)
        try container.encodeIfPresent(fileType, forKey: .fileType)
        try container.encodeIfPresent(contentType, forKey: .contentType)
        try container.encodeIfPresent(completedAt, forKey: .completedAt)
        try container.encodeIfPresent(failedAt, forKey: .failedAt)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(failureCode, forKey: .failureCode)
    }
}

