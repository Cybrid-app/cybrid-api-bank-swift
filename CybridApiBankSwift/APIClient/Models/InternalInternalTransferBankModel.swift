//
// InternalInternalTransferBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct InternalInternalTransferBankModel: Codable, JSONEncodable, Hashable {

    public enum TypeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case internalBankRebalance = "internal_bank_rebalance"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum StateBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case storing = "storing"
        case pending = "pending"
        case failed = "failed"
        case completed = "completed"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** Auto-generated unique identifier for the transfer. */
    public var guid: String?
    /** The type of internal transfer. */
    public var type: TypeBankModel?
    /** The principal asset code. */
    public var principalAsset: String?
    /** The transfer amount in base units of the principal asset */
    public var principalAmount: Int?
    /** The source account guid. */
    public var principalSourceAccountGuid: String?
    /** The destination account guid. */
    public var principalDestinationAccountGuid: String?
    /** ISO8601 datetime the exchange was created at. */
    public var createdAt: Date?
    /** The state of the verification process. */
    public var state: StateBankModel?

    public init(guid: String? = nil, type: TypeBankModel? = nil, principalAsset: String? = nil, principalAmount: Int? = nil, principalSourceAccountGuid: String? = nil, principalDestinationAccountGuid: String? = nil, createdAt: Date? = nil, state: StateBankModel? = nil) {
        self.guid = guid
        self.type = type
        self.principalAsset = principalAsset
        self.principalAmount = principalAmount
        self.principalSourceAccountGuid = principalSourceAccountGuid
        self.principalDestinationAccountGuid = principalDestinationAccountGuid
        self.createdAt = createdAt
        self.state = state
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case guid
        case type
        case principalAsset = "principal_asset"
        case principalAmount = "principal_amount"
        case principalSourceAccountGuid = "principal_source_account_guid"
        case principalDestinationAccountGuid = "principal_destination_account_guid"
        case createdAt = "created_at"
        case state
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(guid, forKey: .guid)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(principalAsset, forKey: .principalAsset)
        try container.encodeIfPresent(principalAmount, forKey: .principalAmount)
        try container.encodeIfPresent(principalSourceAccountGuid, forKey: .principalSourceAccountGuid)
        try container.encodeIfPresent(principalDestinationAccountGuid, forKey: .principalDestinationAccountGuid)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(state, forKey: .state)
    }
}

