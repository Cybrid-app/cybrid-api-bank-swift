//
// PostExternalWalletBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Request body for external wallet creation. */
public struct PostExternalWalletBankModel: Codable, JSONEncodable, Hashable {

    /** Name of the external wallet. */
    public var name: String
    /** The customer identifier. */
    public var customerGuid: String?
    /** The counterparty identifier. */
    public var counterpartyGuid: String?
    /** The asset code. */
    public var asset: String
    /** The blockchain wallet address for the wallet. */
    public var address: String
    /** The blockchain tag to use when transferring crypto to the wallet. */
    public var tag: String?

    public init(name: String, customerGuid: String? = nil, counterpartyGuid: String? = nil, asset: String, address: String, tag: String? = nil) {
        self.name = name
        self.customerGuid = customerGuid
        self.counterpartyGuid = counterpartyGuid
        self.asset = asset
        self.address = address
        self.tag = tag
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case customerGuid = "customer_guid"
        case counterpartyGuid = "counterparty_guid"
        case asset
        case address
        case tag
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(customerGuid, forKey: .customerGuid)
        try container.encodeIfPresent(counterpartyGuid, forKey: .counterpartyGuid)
        try container.encode(asset, forKey: .asset)
        try container.encode(address, forKey: .address)
        try container.encodeIfPresent(tag, forKey: .tag)
    }
}

