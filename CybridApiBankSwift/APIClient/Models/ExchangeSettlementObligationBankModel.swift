//
// ExchangeSettlementObligationBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc public class ExchangeSettlementObligationBankModel: NSObject, Codable, JSONEncodable {

    public enum StateBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case storing = "storing"
        case pendingCreated = "pending__created"
        case pendingApproved = "pending__approved"
        case failedCreation = "failed_creation"
        case tradesCompleted = "trades_completed"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** Auto-generated unique identifier for the exchange settlement obligation. */
    public var guid: String?
    /** The identifier of the exchange settlement that corresponds to this obligation. */
    public var exchangeSettlementGuid: String?
    /** The asset code. */
    public var asset: String?
    /** The exchange settlement's state */
    public var state: StateBankModel?
    /** The account's payable estimate for this obligation. */
    public var payableAmountEstimate: Int?
    public var payableAmountEstimateNum: NSNumber? {
        get {
            return payableAmountEstimate as NSNumber?
        }
    }
    /** The account's receivable estimate for this obligation. */
    public var receivableAmountEstimate: Int?
    public var receivableAmountEstimateNum: NSNumber? {
        get {
            return receivableAmountEstimate as NSNumber?
        }
    }

    public init(guid: String? = nil, exchangeSettlementGuid: String? = nil, asset: String? = nil, state: StateBankModel? = nil, payableAmountEstimate: Int? = nil, receivableAmountEstimate: Int? = nil) {
        self.guid = guid
        self.exchangeSettlementGuid = exchangeSettlementGuid
        self.asset = asset
        self.state = state
        self.payableAmountEstimate = payableAmountEstimate
        self.receivableAmountEstimate = receivableAmountEstimate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case guid
        case exchangeSettlementGuid = "exchange_settlement_guid"
        case asset
        case state
        case payableAmountEstimate = "payable_amount_estimate"
        case receivableAmountEstimate = "receivable_amount_estimate"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(guid, forKey: .guid)
        try container.encodeIfPresent(exchangeSettlementGuid, forKey: .exchangeSettlementGuid)
        try container.encodeIfPresent(asset, forKey: .asset)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(payableAmountEstimate, forKey: .payableAmountEstimate)
        try container.encodeIfPresent(receivableAmountEstimate, forKey: .receivableAmountEstimate)
    }
}

