//
// TradeBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TradeBankModel: Codable, JSONEncodable, Hashable {

    public enum TradeTypeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case platform = "platform"
        case liquidation = "liquidation"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum SideBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case buy = "buy"
        case sell = "sell"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum StateBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case storing = "storing"
        case pending = "pending"
        case cancelled = "cancelled"
        case completed = "completed"
        case settling = "settling"
        case failed = "failed"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** Auto-generated unique identifier for the trade. */
    public var guid: String?
    /** The type of trade. */
    public var tradeType: TradeTypeBankModel?
    /** The associated customer's identifier. */
    public var customerGuid: String?
    /** The associated quote's identifier. */
    public var quoteGuid: String?
    /** The trade symbol the pricing is related to. Format is asset-counter_asset, e.g., BTC-USD. */
    public var symbol: String?
    /** The direction of the quote: either 'buy' or 'sell'. */
    public var side: SideBankModel?
    /** The trade's state */
    public var state: StateBankModel?
    /** The failure code for failed trades. */
    public var failureCode: String?
    /** The amount to be received in base units of the currency: currency is \"asset\" for buy and \"counter_asset\" for sell. */
    public var receiveAmount: String?
    /** The amount to be delivered in base units of the currency: currency is \"counter_asset\" for buy and \"asset\" for sell. */
    public var deliverAmount: String?
    /** The fee associated with the trade. Denominated in \"counter_asset\" base units */
    public var fee: String?
    /** ISO8601 datetime the trade was created at. */
    public var createdAt: Date?
    /** ISO8601 datetime the trade was last updated at. */
    public var updatedAt: Date?
    /** The labels associated with the trade. */
    public var labels: [String]?

    public init(guid: String? = nil, tradeType: TradeTypeBankModel? = nil, customerGuid: String? = nil, quoteGuid: String? = nil, symbol: String? = nil, side: SideBankModel? = nil, state: StateBankModel? = nil, failureCode: String? = nil, receiveAmount: String? = nil, deliverAmount: String? = nil, fee: String? = nil, createdAt: Date? = nil, updatedAt: Date? = nil, labels: [String]? = nil) {
        self.guid = guid
        self.tradeType = tradeType
        self.customerGuid = customerGuid
        self.quoteGuid = quoteGuid
        self.symbol = symbol
        self.side = side
        self.state = state
        self.failureCode = failureCode
        self.receiveAmount = receiveAmount
        self.deliverAmount = deliverAmount
        self.fee = fee
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.labels = labels
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case guid
        case tradeType = "trade_type"
        case customerGuid = "customer_guid"
        case quoteGuid = "quote_guid"
        case symbol
        case side
        case state
        case failureCode = "failure_code"
        case receiveAmount = "receive_amount"
        case deliverAmount = "deliver_amount"
        case fee
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case labels
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(guid, forKey: .guid)
        try container.encodeIfPresent(tradeType, forKey: .tradeType)
        try container.encodeIfPresent(customerGuid, forKey: .customerGuid)
        try container.encodeIfPresent(quoteGuid, forKey: .quoteGuid)
        try container.encodeIfPresent(symbol, forKey: .symbol)
        try container.encodeIfPresent(side, forKey: .side)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(failureCode, forKey: .failureCode)
        try container.encodeIfPresent(receiveAmount, forKey: .receiveAmount)
        try container.encodeIfPresent(deliverAmount, forKey: .deliverAmount)
        try container.encodeIfPresent(fee, forKey: .fee)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(labels, forKey: .labels)
    }
}

