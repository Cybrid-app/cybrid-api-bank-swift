//
// PostExternalBankAccountCounterpartyBankAccountBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The counterparty&#39;s checking bank account information. Required when account_kind is raw_routing_details. */
public struct PostExternalBankAccountCounterpartyBankAccountBankModel: Codable, JSONEncodable, Hashable {

    public enum RoutingNumberTypeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case cpa = "CPA"
        case aba = "ABA"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** The type of routing number. Required when account_kind is raw_routing_details. */
    public var routingNumberType: RoutingNumberTypeBankModel?
    /** The routing number. Required when account_kind is raw_routing_details. */
    public var routingNumber: String?
    /** The account number. Required when account_kind is raw_routing_details. */
    public var accountNumber: String?

    public init(routingNumberType: RoutingNumberTypeBankModel? = nil, routingNumber: String? = nil, accountNumber: String? = nil) {
        self.routingNumberType = routingNumberType
        self.routingNumber = routingNumber
        self.accountNumber = accountNumber
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case routingNumberType = "routing_number_type"
        case routingNumber = "routing_number"
        case accountNumber = "account_number"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(routingNumberType, forKey: .routingNumberType)
        try container.encodeIfPresent(routingNumber, forKey: .routingNumber)
        try container.encodeIfPresent(accountNumber, forKey: .accountNumber)
    }
}

