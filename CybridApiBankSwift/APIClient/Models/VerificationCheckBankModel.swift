//
// VerificationCheckBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct VerificationCheckBankModel: Codable, JSONEncodable, Hashable {

    public enum TypeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case businessWatchlists = "business_watchlists"
        case businessVerification = "business_verification"
        case businessTaxIdVerification = "business_tax_id_verification"
        case personAttested = "person_attested"
        case personTaxIdAttested = "person_tax_id_attested"
        case personWatchlists = "person_watchlists"
        case personVerification = "person_verification"
        case personAuthentication = "person_authentication"
        case personGovIdVerification = "person_gov_id_verification"
        case personTaxIdVerification = "person_tax_id_verification"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum StateBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case passed = "passed"
        case failed = "failed"
        case expired = "expired"
        case invalidated = "invalidated"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** The type of verification check. */
    public var type: TypeBankModel
    /** The state of the verification check. */
    public var state: StateBankModel
    /** The reason codes explaining the outcome. */
    public var failureCodes: [String]?

    public init(type: TypeBankModel, state: StateBankModel, failureCodes: [String]? = nil) {
        self.type = type
        self.state = state
        self.failureCodes = failureCodes
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case state
        case failureCodes = "failure_codes"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(state, forKey: .state)
        try container.encodeIfPresent(failureCodes, forKey: .failureCodes)
    }
}

