//
// PostSupportedPayoutSymbolsBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Supported payout symbols details. */
public struct PostSupportedPayoutSymbolsBankModel: Codable, JSONEncodable, Hashable {

    public enum ParticipantsTypeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case c2C = "C2C"
        case c2B = "C2B"
        case b2C = "B2C"
        case b2B = "B2B"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum RouteBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case bankAccount = "bank_account"
        case mobileWallet = "mobile_wallet"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** The primary asset of the payout symbol, e.g., MXN. */
    public var primaryAsset: String
    /** The counter asset of the payout symbol, e.g., USD. */
    public var counterAsset: String
    /** The ISO 3166 country 2-Alpha country code is permitted in, e.g., MX. */
    public var countryCode: String
    /** The participants the symbol is permitted for. */
    public var participantsType: ParticipantsTypeBankModel
    /** The route the symbol is permitted for. */
    public var route: RouteBankModel

    public init(primaryAsset: String, counterAsset: String, countryCode: String, participantsType: ParticipantsTypeBankModel, route: RouteBankModel) {
        self.primaryAsset = primaryAsset
        self.counterAsset = counterAsset
        self.countryCode = countryCode
        self.participantsType = participantsType
        self.route = route
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case primaryAsset = "primary_asset"
        case counterAsset = "counter_asset"
        case countryCode = "country_code"
        case participantsType = "participants_type"
        case route
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(primaryAsset, forKey: .primaryAsset)
        try container.encode(counterAsset, forKey: .counterAsset)
        try container.encode(countryCode, forKey: .countryCode)
        try container.encode(participantsType, forKey: .participantsType)
        try container.encode(route, forKey: .route)
    }
}

