//
// PostIdentityVerificationBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PostIdentityVerificationBankModel: Codable, JSONEncodable, Hashable {

    public enum TypeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case kyc = "kyc"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum MethodBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case idAndSelfie = "id_and_selfie"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum ExpectedBehavioursBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case passedImmediately = "passed_immediately"
        case failedImmediately = "failed_immediately"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** The type of identity verification. */
    public var type: TypeBankModel
    /** The identity verification method. */
    public var method: MethodBankModel
    /** The ISO 3166 country 2-Alpha country the customer is being verified in. If not present, will default to the Bank's configured country code. */
    public var countryCode: String?
    /** The customer's identifier. */
    public var customerGuid: String?
    /** The optional expected behaviour to simulate. */
    public var expectedBehaviours: [ExpectedBehavioursBankModel]?

    public init(type: TypeBankModel, method: MethodBankModel, countryCode: String? = nil, customerGuid: String? = nil, expectedBehaviours: [ExpectedBehavioursBankModel]? = nil) {
        self.type = type
        self.method = method
        self.countryCode = countryCode
        self.customerGuid = customerGuid
        self.expectedBehaviours = expectedBehaviours
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case method
        case countryCode = "country_code"
        case customerGuid = "customer_guid"
        case expectedBehaviours = "expected_behaviours"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(method, forKey: .method)
        try container.encodeIfPresent(countryCode, forKey: .countryCode)
        try container.encodeIfPresent(customerGuid, forKey: .customerGuid)
        try container.encodeIfPresent(expectedBehaviours, forKey: .expectedBehaviours)
    }
}

