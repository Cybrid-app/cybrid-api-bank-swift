//
// PostBankBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Request body for bank creation. */
public struct PostBankBankModel: Codable, JSONEncodable, Hashable {

    public enum TypeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case sandbox = "sandbox"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum FeaturesBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case attestationIdentityRecords = "attestation_identity_records"
        case attestationIdentityRecordsV2 = "attestation_identity_records_v2"
        case kycIdentityVerifications = "kyc_identity_verifications"
        case businessCustomers = "business_customers"
        case individualCustomers = "individual_customers"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** The type of bank. */
    public var type: TypeBankModel
    /** The name of the bank. */
    public var name: String
    /** The trading symbols supported by the bank. */
    public var supportedTradingSymbols: [String]
    /** The payout symbols supported by the bank. This is not yet supported and should be nil or empty. */
    public var supportedPayoutSymbols: [PostSupportedPayoutSymbolsBankModel]?
    /** The fiat account assets supported by the bank. */
    public var supportedFiatAccountAssets: [String]
    /** The country codes supported by the bank. */
    public var supportedCountryCodes: [String]
    /** The features supported by the bank. */
    public var features: [FeaturesBankModel]
    /** The list of allowed CORS origin URIs. */
    public var corsAllowedOrigins: [String]?

    public init(type: TypeBankModel, name: String, supportedTradingSymbols: [String], supportedPayoutSymbols: [PostSupportedPayoutSymbolsBankModel]? = nil, supportedFiatAccountAssets: [String], supportedCountryCodes: [String], features: [FeaturesBankModel], corsAllowedOrigins: [String]? = nil) {
        self.type = type
        self.name = name
        self.supportedTradingSymbols = supportedTradingSymbols
        self.supportedPayoutSymbols = supportedPayoutSymbols
        self.supportedFiatAccountAssets = supportedFiatAccountAssets
        self.supportedCountryCodes = supportedCountryCodes
        self.features = features
        self.corsAllowedOrigins = corsAllowedOrigins
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case name
        case supportedTradingSymbols = "supported_trading_symbols"
        case supportedPayoutSymbols = "supported_payout_symbols"
        case supportedFiatAccountAssets = "supported_fiat_account_assets"
        case supportedCountryCodes = "supported_country_codes"
        case features
        case corsAllowedOrigins = "cors_allowed_origins"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(name, forKey: .name)
        try container.encode(supportedTradingSymbols, forKey: .supportedTradingSymbols)
        try container.encodeIfPresent(supportedPayoutSymbols, forKey: .supportedPayoutSymbols)
        try container.encode(supportedFiatAccountAssets, forKey: .supportedFiatAccountAssets)
        try container.encode(supportedCountryCodes, forKey: .supportedCountryCodes)
        try container.encode(features, forKey: .features)
        try container.encodeIfPresent(corsAllowedOrigins, forKey: .corsAllowedOrigins)
    }
}

