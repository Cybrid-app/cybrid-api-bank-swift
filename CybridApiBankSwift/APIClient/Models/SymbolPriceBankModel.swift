//
// SymbolPriceBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SymbolPriceBankModel: Codable, JSONEncodable, Hashable {

    /** The trade symbol the pricing is related to. Format is asset-counter_asset, e.g., BTC-USD. */
    public var symbol: String?
    /** The purchase price (in base units) for the asset denominated in the counter asset currency. */
    public var buyPrice: String?
    /** The sale price (in base units) for the asset denominated in the counter asset currency. */
    public var sellPrice: String?
    /** ISO8601 datetime the purchase price was generated at. */
    public var buyPriceLastUpdatedAt: Date?
    /** ISO8601 datetime the sale price was generated at. */
    public var sellPriceLastUpdatedAt: Date?

    public init(symbol: String? = nil, buyPrice: String? = nil, sellPrice: String? = nil, buyPriceLastUpdatedAt: Date? = nil, sellPriceLastUpdatedAt: Date? = nil) {
        self.symbol = symbol
        self.buyPrice = buyPrice
        self.sellPrice = sellPrice
        self.buyPriceLastUpdatedAt = buyPriceLastUpdatedAt
        self.sellPriceLastUpdatedAt = sellPriceLastUpdatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case symbol
        case buyPrice = "buy_price"
        case sellPrice = "sell_price"
        case buyPriceLastUpdatedAt = "buy_price_last_updated_at"
        case sellPriceLastUpdatedAt = "sell_price_last_updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(symbol, forKey: .symbol)
        try container.encodeIfPresent(buyPrice, forKey: .buyPrice)
        try container.encodeIfPresent(sellPrice, forKey: .sellPrice)
        try container.encodeIfPresent(buyPriceLastUpdatedAt, forKey: .buyPriceLastUpdatedAt)
        try container.encodeIfPresent(sellPriceLastUpdatedAt, forKey: .sellPriceLastUpdatedAt)
    }
}

