//
// PostVerificationKeyBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PostVerificationKeyBankModel: Codable, JSONEncodable, Hashable {

    public enum TypeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case attestation = "attestation"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum AlgorithmBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case rs512 = "RS512"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** The verification key's type. */
    public var type: TypeBankModel
    /** The verification key's algorithm. */
    public var algorithm: AlgorithmBankModel
    /** DER encoded public key in Base64 format. */
    public var publicKey: String
    /** Value signed in the **signature** field. */
    public var nonce: String
    /** Signature on **nonce** using PKCS1v15 padding and the SHA512 hashing algorithm in Base64 format. */
    public var signature: String

    public init(type: TypeBankModel, algorithm: AlgorithmBankModel, publicKey: String, nonce: String, signature: String) {
        self.type = type
        self.algorithm = algorithm
        self.publicKey = publicKey
        self.nonce = nonce
        self.signature = signature
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case algorithm
        case publicKey = "public_key"
        case nonce
        case signature
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(algorithm, forKey: .algorithm)
        try container.encode(publicKey, forKey: .publicKey)
        try container.encode(nonce, forKey: .nonce)
        try container.encode(signature, forKey: .signature)
    }
}

