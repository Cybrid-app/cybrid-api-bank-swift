//
// PostFileBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Request body for a new file. */
public struct PostFileBankModel: Codable, JSONEncodable, Hashable {

    public enum TypeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case driversLicenseFront = "drivers_license_front"
        case driversLicenseBack = "drivers_license_back"
        case passport = "passport"
        case identificationCard = "identification_card"
        case residenceCard = "residence_card"
        case selfie = "selfie"
        case selfieLeft = "selfie_left"
        case selfieRight = "selfie_right"
        case utilityBill = "utility_bill"
        case bankStatement = "bank_statement"
        case propertyTax = "property_tax"
        case taxDocument = "tax_document"
        case einLetter = "ein_letter"
        case incorporationCertificate = "incorporation_certificate"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum ContentTypeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case imageSlashJpeg = "image/jpeg"
        case imageSlashPng = "image/png"
        case applicationSlashPdf = "application/pdf"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** The type of file. */
    public var type: TypeBankModel
    /** The customer identifier. */
    public var customerGuid: String
    /** The name of the file. */
    public var filename: String
    /** The content type of the file. */
    public var contentType: ContentTypeBankModel
    /** Base64 encoded file content */
    public var data: String?

    public init(type: TypeBankModel, customerGuid: String, filename: String, contentType: ContentTypeBankModel, data: String? = nil) {
        self.type = type
        self.customerGuid = customerGuid
        self.filename = filename
        self.contentType = contentType
        self.data = data
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case customerGuid = "customer_guid"
        case filename
        case contentType = "content_type"
        case data
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(customerGuid, forKey: .customerGuid)
        try container.encode(filename, forKey: .filename)
        try container.encode(contentType, forKey: .contentType)
        try container.encodeIfPresent(data, forKey: .data)
    }
}

