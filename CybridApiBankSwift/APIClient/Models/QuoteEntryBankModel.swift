//
// QuoteEntryBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct QuoteEntryBankModel: Codable, JSONEncodable, Hashable {

    public var sourceAccount: QuoteEntrySourceAccountBankModel?
    public var destinationAccount: QuoteEntryDestinationAccountBankModel?
    /** The amount to be received in base units of the currency */
    public var receiveAmount: Int?
    /** The amount to be delivered in base units of the currency */
    public var deliverAmount: Int?
    /** The fee associated with the account entry. */
    public var fee: Int?

    public init(sourceAccount: QuoteEntrySourceAccountBankModel? = nil, destinationAccount: QuoteEntryDestinationAccountBankModel? = nil, receiveAmount: Int? = nil, deliverAmount: Int? = nil, fee: Int? = nil) {
        self.sourceAccount = sourceAccount
        self.destinationAccount = destinationAccount
        self.receiveAmount = receiveAmount
        self.deliverAmount = deliverAmount
        self.fee = fee
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sourceAccount = "source_account"
        case destinationAccount = "destination_account"
        case receiveAmount = "receive_amount"
        case deliverAmount = "deliver_amount"
        case fee
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(sourceAccount, forKey: .sourceAccount)
        try container.encodeIfPresent(destinationAccount, forKey: .destinationAccount)
        try container.encodeIfPresent(receiveAmount, forKey: .receiveAmount)
        try container.encodeIfPresent(deliverAmount, forKey: .deliverAmount)
        try container.encodeIfPresent(fee, forKey: .fee)
    }
}

