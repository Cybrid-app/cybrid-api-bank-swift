//
// StageBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/**  */
public struct StageBankModel: Codable, JSONEncodable, Hashable {

    /** The unique identifier for the stage. */
    public var guid: String
    /** The type of stage; one of payout. */
    public var type: String
    /** The state of the stage; one of storing, planning, planned, executing, completed, or failed. */
    public var state: String
    /** The failure code for failed stages. */
    public var failureCode: String?
    /** The ISO8601 datetime the stage was created at. */
    public var createdAt: Date
    /** The ISO8601 datetime the stage was last updated at. */
    public var updatedAt: Date
    public var sourceAccount: AccountAssociationBankModel
    public var destinationAccount: AccountAssociationBankModel
    /** The fees associated with the stage. */
    public var fees: [FeeAssociationBankModel]

    public init(guid: String, type: String, state: String, failureCode: String? = nil, createdAt: Date, updatedAt: Date, sourceAccount: AccountAssociationBankModel, destinationAccount: AccountAssociationBankModel, fees: [FeeAssociationBankModel]) {
        self.guid = guid
        self.type = type
        self.state = state
        self.failureCode = failureCode
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.sourceAccount = sourceAccount
        self.destinationAccount = destinationAccount
        self.fees = fees
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case guid
        case type
        case state
        case failureCode = "failure_code"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case sourceAccount = "source_account"
        case destinationAccount = "destination_account"
        case fees
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(guid, forKey: .guid)
        try container.encode(type, forKey: .type)
        try container.encode(state, forKey: .state)
        try container.encodeIfPresent(failureCode, forKey: .failureCode)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encode(sourceAccount, forKey: .sourceAccount)
        try container.encode(destinationAccount, forKey: .destinationAccount)
        try container.encode(fees, forKey: .fees)
    }
}

