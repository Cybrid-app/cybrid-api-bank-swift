//
// InvoiceBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct InvoiceBankModel: Codable, JSONEncodable, Hashable {

    /** Auto-generated unique identifier for the payment instruction. */
    public var guid: String?
    /** The customer identifier. */
    public var customerGuid: String?
    /** The account payment will ultimately be received into. */
    public var accountGuid: String?
    /** ISO8601 datetime the record was created at. */
    public var createdAt: Date?
    /** ISO8601 datetime the record was last updated at. */
    public var updatedAt: Date?
    /** The type of invoice; one of lightning. */
    public var type: String?
    /** The asset code the customer will receive the funds in. */
    public var asset: String?
    /** The amount to be received in base units of the asset, i.e., the amount the customer will receive after fees. ONLY one of receive_amount or deliver_amount is required. */
    public var receiveAmount: Int?
    /** The amount to be delivered in base units of the asset, i.e., the amount the customer will receive before fees. ONLY one of receive_amount or deliver_amount is required. */
    public var deliverAmount: Int?
    /** The fee associated with this invoice in base units of the asset. */
    public var fee: Int?
    /** The state of the invoice; one of storing, unpaid, cancelling, cancelled, settling, or paid. */
    public var state: String?
    /** The labels associated with the invoice. */
    public var labels: [String]?

    public init(guid: String? = nil, customerGuid: String? = nil, accountGuid: String? = nil, createdAt: Date? = nil, updatedAt: Date? = nil, type: String? = nil, asset: String? = nil, receiveAmount: Int? = nil, deliverAmount: Int? = nil, fee: Int? = nil, state: String? = nil, labels: [String]? = nil) {
        self.guid = guid
        self.customerGuid = customerGuid
        self.accountGuid = accountGuid
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.type = type
        self.asset = asset
        self.receiveAmount = receiveAmount
        self.deliverAmount = deliverAmount
        self.fee = fee
        self.state = state
        self.labels = labels
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case guid
        case customerGuid = "customer_guid"
        case accountGuid = "account_guid"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case type
        case asset
        case receiveAmount = "receive_amount"
        case deliverAmount = "deliver_amount"
        case fee
        case state
        case labels
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(guid, forKey: .guid)
        try container.encodeIfPresent(customerGuid, forKey: .customerGuid)
        try container.encodeIfPresent(accountGuid, forKey: .accountGuid)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(asset, forKey: .asset)
        try container.encodeIfPresent(receiveAmount, forKey: .receiveAmount)
        try container.encodeIfPresent(deliverAmount, forKey: .deliverAmount)
        try container.encodeIfPresent(fee, forKey: .fee)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(labels, forKey: .labels)
    }
}

