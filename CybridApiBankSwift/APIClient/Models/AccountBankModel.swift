//
// AccountBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc public class AccountBankModel: NSObject, Codable, JSONEncodable {

    public enum TypeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case backstopped = "backstopped"
        case trading = "trading"
        case fee = "fee"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** The account type. */
    public var type: TypeBankModel?
    /** Auto-generated unique identifier for the account. */
    public var guid: String?
    /** ISO8601 datetime the account was created at. */
    public var createdAt: Date?
    /** The asset code. */
    public var asset: String?
    /** The name of the account. */
    public var name: String?
    /** The bank identifier associated with the account. */
    public var bankGuid: String?
    /** The customer identifier associated with the account. */
    public var customerGuid: String?
    /** The amount of funds that are in the account, in base units of the asset. */
    public var platformBalance: Int?
    public var platformBalanceNum: NSNumber? {
        get {
            return platformBalance as NSNumber?
        }
    }
    /** The amount of funds that are in the account, in base units of the asset, that are available for use on the platform. */
    public var platformAvailable: Int?
    public var platformAvailableNum: NSNumber? {
        get {
            return platformAvailable as NSNumber?
        }
    }

    public init(type: TypeBankModel? = nil, guid: String? = nil, createdAt: Date? = nil, asset: String? = nil, name: String? = nil, bankGuid: String? = nil, customerGuid: String? = nil, platformBalance: Int? = nil, platformAvailable: Int? = nil) {
        self.type = type
        self.guid = guid
        self.createdAt = createdAt
        self.asset = asset
        self.name = name
        self.bankGuid = bankGuid
        self.customerGuid = customerGuid
        self.platformBalance = platformBalance
        self.platformAvailable = platformAvailable
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case guid
        case createdAt = "created_at"
        case asset
        case name
        case bankGuid = "bank_guid"
        case customerGuid = "customer_guid"
        case platformBalance = "platform_balance"
        case platformAvailable = "platform_available"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(guid, forKey: .guid)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(asset, forKey: .asset)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(bankGuid, forKey: .bankGuid)
        try container.encodeIfPresent(customerGuid, forKey: .customerGuid)
        try container.encodeIfPresent(platformBalance, forKey: .platformBalance)
        try container.encodeIfPresent(platformAvailable, forKey: .platformAvailable)
    }
}

