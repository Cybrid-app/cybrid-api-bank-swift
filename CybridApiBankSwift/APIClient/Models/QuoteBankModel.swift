//
// QuoteBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc public class QuoteBankModel: NSObject, Codable, JSONEncodable {

    public enum SideBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case buy = "buy"
        case sell = "sell"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** Auto-generated unique identifier for the quote. */
    public var guid: String?
    /** The unique identifier for the customer. */
    public var customerGuid: String?
    /** Symbol the quote is being requested for. Format is \"asset-counter_asset\" in uppercase. */
    public var symbol: String?
    /** The direction of the quote: either 'buy' or 'sell'. */
    public var side: SideBankModel?
    /** The amount to be received in base units of the currency: currency is \"asset\" for buy and \"counter_asset\" for sell. */
    public var receiveAmount: Int?
    public var receiveAmountNum: NSNumber? {
        get {
            return receiveAmount as NSNumber?
        }
    }
    /** The amount to be delivered in base units of the currency: currency is \"counter_asset\" for buy and \"asset\" for sell. */
    public var deliverAmount: Int?
    public var deliverAmountNum: NSNumber? {
        get {
            return deliverAmount as NSNumber?
        }
    }
    /** The fee associated with the trade. Denominated in \"counter_asset\" base units */
    public var fee: Int?
    public var feeNum: NSNumber? {
        get {
            return fee as NSNumber?
        }
    }
    /** ISO8601 datetime the quote was created at. */
    public var issuedAt: Date?
    /** ISO8601 datetime the quote is expiring at. */
    public var expiresAt: Date?

    public init(guid: String? = nil, customerGuid: String? = nil, symbol: String? = nil, side: SideBankModel? = nil, receiveAmount: Int? = nil, deliverAmount: Int? = nil, fee: Int? = nil, issuedAt: Date? = nil, expiresAt: Date? = nil) {
        self.guid = guid
        self.customerGuid = customerGuid
        self.symbol = symbol
        self.side = side
        self.receiveAmount = receiveAmount
        self.deliverAmount = deliverAmount
        self.fee = fee
        self.issuedAt = issuedAt
        self.expiresAt = expiresAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case guid
        case customerGuid = "customer_guid"
        case symbol
        case side
        case receiveAmount = "receive_amount"
        case deliverAmount = "deliver_amount"
        case fee
        case issuedAt = "issued_at"
        case expiresAt = "expires_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(guid, forKey: .guid)
        try container.encodeIfPresent(customerGuid, forKey: .customerGuid)
        try container.encodeIfPresent(symbol, forKey: .symbol)
        try container.encodeIfPresent(side, forKey: .side)
        try container.encodeIfPresent(receiveAmount, forKey: .receiveAmount)
        try container.encodeIfPresent(deliverAmount, forKey: .deliverAmount)
        try container.encodeIfPresent(fee, forKey: .fee)
        try container.encodeIfPresent(issuedAt, forKey: .issuedAt)
        try container.encodeIfPresent(expiresAt, forKey: .expiresAt)
    }
}

