//
// DepositAddressBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DepositAddressBankModel: Codable, JSONEncodable, Hashable {

    public enum StateBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case storing = "storing"
        case created = "created"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum FormatBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case standard = "standard"
        case legacy = "legacy"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** Auto-generated unique identifier for the identity verification. */
    public var guid: String?
    /** The address' bank identifier. */
    public var bankGuid: String?
    /** The address' customer identifier. */
    public var customerGuid: String?
    /** The address' account identifier. */
    public var accountGuid: String?
    /** ISO8601 datetime the address was created at. */
    public var createdAt: Date?
    /** The asset the transfer is related to, e.g., USD. */
    public var asset: String?
    /** The state of the address. */
    public var state: StateBankModel?
    /** The blockchain address. */
    public var address: String?
    /** The blockchain address format. */
    public var format: FormatBankModel?
    /** The blockchain address tag. */
    public var tag: String?

    public init(guid: String? = nil, bankGuid: String? = nil, customerGuid: String? = nil, accountGuid: String? = nil, createdAt: Date? = nil, asset: String? = nil, state: StateBankModel? = nil, address: String? = nil, format: FormatBankModel? = nil, tag: String? = nil) {
        self.guid = guid
        self.bankGuid = bankGuid
        self.customerGuid = customerGuid
        self.accountGuid = accountGuid
        self.createdAt = createdAt
        self.asset = asset
        self.state = state
        self.address = address
        self.format = format
        self.tag = tag
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case guid
        case bankGuid = "bank_guid"
        case customerGuid = "customer_guid"
        case accountGuid = "account_guid"
        case createdAt = "created_at"
        case asset
        case state
        case address
        case format
        case tag
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(guid, forKey: .guid)
        try container.encodeIfPresent(bankGuid, forKey: .bankGuid)
        try container.encodeIfPresent(customerGuid, forKey: .customerGuid)
        try container.encodeIfPresent(accountGuid, forKey: .accountGuid)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(asset, forKey: .asset)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(format, forKey: .format)
        try container.encodeIfPresent(tag, forKey: .tag)
    }
}

