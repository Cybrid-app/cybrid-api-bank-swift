//
// InternalTransactionBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct InternalTransactionBankModel: Codable, JSONEncodable, Hashable {

    public enum DirectionBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case credit = "credit"
        case debit = "debit"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** The provider supplied identifier for the transaction */
    public var providerId: String?
    /** The transaction amount in base units of the asset */
    public var amount: String?
    /** The asset the transaction is denominated in */
    public var asset: String?
    /** The direction of the transaction: \"debit\" or \"credit\" */
    public var direction: DirectionBankModel?
    /** The timestamp of the transaction */
    public var timestamp: Date?
    /** The description of the transaction */
    public var description: String?

    public init(providerId: String? = nil, amount: String? = nil, asset: String? = nil, direction: DirectionBankModel? = nil, timestamp: Date? = nil, description: String? = nil) {
        self.providerId = providerId
        self.amount = amount
        self.asset = asset
        self.direction = direction
        self.timestamp = timestamp
        self.description = description
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case providerId = "provider_id"
        case amount
        case asset
        case direction
        case timestamp
        case description
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(providerId, forKey: .providerId)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(asset, forKey: .asset)
        try container.encodeIfPresent(direction, forKey: .direction)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(description, forKey: .description)
    }
}

