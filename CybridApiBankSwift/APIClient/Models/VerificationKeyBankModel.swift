//
// VerificationKeyBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct VerificationKeyBankModel: Codable, JSONEncodable, Hashable {

    public enum TypeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case attestation = "attestation"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum StateBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case storing = "storing"
        case pending = "pending"
        case verified = "verified"
        case failed = "failed"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum FailureCodeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case algorithm = "invalid_algorithm"
        case nonce = "invalid_nonce"
        case publicKey = "invalid_public_key"
        case signature = "invalid_signature"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum AlgorithmBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case rs512 = "RS512"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** Auto-generated unique identifier for the verification key. */
    public var guid: String?
    /** The banks's identifier. */
    public var bankGuid: String?
    /** The verification key's type. */
    public var type: TypeBankModel?
    /** The verification key's state. */
    public var state: StateBankModel?
    /** The verification key's failure code (if any). */
    public var failureCode: FailureCodeBankModel?
    /** The verification key's algorithm. */
    public var algorithm: AlgorithmBankModel?
    /** The verification key's cryptographic fingerprint. */
    public var fingerprint: String?
    /** ISO8601 datetime the verification key was created at. */
    public var createdAt: Date?

    public init(guid: String? = nil, bankGuid: String? = nil, type: TypeBankModel? = nil, state: StateBankModel? = nil, failureCode: FailureCodeBankModel? = nil, algorithm: AlgorithmBankModel? = nil, fingerprint: String? = nil, createdAt: Date? = nil) {
        self.guid = guid
        self.bankGuid = bankGuid
        self.type = type
        self.state = state
        self.failureCode = failureCode
        self.algorithm = algorithm
        self.fingerprint = fingerprint
        self.createdAt = createdAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case guid
        case bankGuid = "bank_guid"
        case type
        case state
        case failureCode = "failure_code"
        case algorithm
        case fingerprint
        case createdAt = "created_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(guid, forKey: .guid)
        try container.encodeIfPresent(bankGuid, forKey: .bankGuid)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(failureCode, forKey: .failureCode)
        try container.encodeIfPresent(algorithm, forKey: .algorithm)
        try container.encodeIfPresent(fingerprint, forKey: .fingerprint)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
    }
}

