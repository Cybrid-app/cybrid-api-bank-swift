//
// WorkflowWithDetailsBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct WorkflowWithDetailsBankModel: Codable, JSONEncodable, Hashable {

    public enum TypeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case plaid = "plaid"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** Auto-generated unique identifier for the workflow. */
    public var guid: String?
    /** The associated customer's identifier. */
    public var customerGuid: String?
    /** The type of workflow. */
    public var type: TypeBankModel?
    /** ISO8601 datetime the bank was created at. */
    public var createdAt: Date?
    /** The Plaid link token generated by the workflow. */
    public var plaidLinkToken: String?

    public init(guid: String? = nil, customerGuid: String? = nil, type: TypeBankModel? = nil, createdAt: Date? = nil, plaidLinkToken: String? = nil) {
        self.guid = guid
        self.customerGuid = customerGuid
        self.type = type
        self.createdAt = createdAt
        self.plaidLinkToken = plaidLinkToken
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case guid
        case customerGuid = "customer_guid"
        case type
        case createdAt = "created_at"
        case plaidLinkToken = "plaid_link_token"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(guid, forKey: .guid)
        try container.encodeIfPresent(customerGuid, forKey: .customerGuid)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(plaidLinkToken, forKey: .plaidLinkToken)
    }
}

