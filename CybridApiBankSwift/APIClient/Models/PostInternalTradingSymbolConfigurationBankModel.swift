//
// PostInternalTradingSymbolConfigurationBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc public class PostInternalTradingSymbolConfigurationBankModel: NSObject, Codable, JSONEncodable {

    public enum TypeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case platform = "platform"
        case bank = "bank"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum EnvironmentBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case sandbox = "sandbox"
        case production = "production"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** The trading symbol configuration type. */
    public var type: TypeBankModel
    /** The environment the configuration is associated with. */
    public var environment: EnvironmentBankModel?
    /** The bank identifier that the configuration is associated with. */
    public var bankGuid: String?
    /** Flag indicating if the symbol is enabled for trading on the platform. */
    public var enabled: Bool
    /** The symbol code of the configuration. */
    public var symbol: String

    public init(type: TypeBankModel, environment: EnvironmentBankModel? = nil, bankGuid: String? = nil, enabled: Bool, symbol: String) {
        self.type = type
        self.environment = environment
        self.bankGuid = bankGuid
        self.enabled = enabled
        self.symbol = symbol
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case environment
        case bankGuid = "bank_guid"
        case enabled
        case symbol
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(environment, forKey: .environment)
        try container.encodeIfPresent(bankGuid, forKey: .bankGuid)
        try container.encode(enabled, forKey: .enabled)
        try container.encode(symbol, forKey: .symbol)
    }
}

