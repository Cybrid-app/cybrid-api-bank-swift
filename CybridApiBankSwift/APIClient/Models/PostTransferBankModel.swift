//
// PostTransferBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PostTransferBankModel: Codable, JSONEncodable, Hashable {

    public enum TransferTypeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case funding = "funding"
        case book = "book"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum ExpectedErrorBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case pending = "pending"
        case inProgress = "in_progress"
        case completed = "completed"
        case failed = "failed"
        case cancelled = "cancelled"
        case manualIntervention = "manual_intervention"
        case reversed = "reversed"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** The associated quote's identifier. */
    public var quoteGuid: String
    /** The type of transfer. */
    public var transferType: TransferTypeBankModel
    /** The customer's fiat asset external bank account's identifier. */
    public var externalBankAccountGuid: String?
    /** The optional expected error to simulate transfer failure. */
    public var expectedError: ExpectedErrorBankModel?

    public init(quoteGuid: String, transferType: TransferTypeBankModel, externalBankAccountGuid: String? = nil, expectedError: ExpectedErrorBankModel? = nil) {
        self.quoteGuid = quoteGuid
        self.transferType = transferType
        self.externalBankAccountGuid = externalBankAccountGuid
        self.expectedError = expectedError
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case quoteGuid = "quote_guid"
        case transferType = "transfer_type"
        case externalBankAccountGuid = "external_bank_account_guid"
        case expectedError = "expected_error"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(quoteGuid, forKey: .quoteGuid)
        try container.encode(transferType, forKey: .transferType)
        try container.encodeIfPresent(externalBankAccountGuid, forKey: .externalBankAccountGuid)
        try container.encodeIfPresent(expectedError, forKey: .expectedError)
    }
}

