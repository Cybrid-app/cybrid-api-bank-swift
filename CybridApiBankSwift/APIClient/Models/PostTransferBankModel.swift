//
// PostTransferBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PostTransferBankModel: Codable, JSONEncodable, Hashable {

    public enum TransferTypeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case funding = "funding"
        case book = "book"
        case crypto = "crypto"
        case instantFunding = "instant_funding"
        case interAccount = "inter_account"
        case lightning = "lightning"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** The associated quote's identifier. */
    public var quoteGuid: String
    /** The type of transfer. */
    public var transferType: TransferTypeBankModel
    /** The customer's identifier. */
    public var customerGuid: String?
    /** The source account's identifier. Required for book transfers. */
    public var sourceAccountGuid: String?
    /** The source participants for the transfer. */
    public var sourceParticipants: [PostTransferParticipantBankModel]?
    /** The destination account's identifier. Required for book transfers. */
    public var destinationAccountGuid: String?
    /** The destination participants for the transfer. */
    public var destinationParticipants: [PostTransferParticipantBankModel]?
    /** The customer's external wallet's identifier. */
    public var externalWalletGuid: String?
    /** The customer's 'plaid' or 'plaid_processor_token' external bank account's identifier. */
    public var externalBankAccountGuid: String?
    /** The network fee account's identifier. Required for network fee transfers. Must be the identifier for the customer's or bank's fiat account. For customer's to pay the network fees, include the customer's fiat account guid. For bank's to pay the network fees, include the bank's fiat account guid. */
    public var networkFeeAccountGuid: String?
    /** The desired payment rail to initiate the transfer for. Valid values are: ach, eft, wire. Valid for funding transfers only. */
    public var paymentRail: String?
    /** The memo to send to the counterparty. */
    public var beneficiaryMemo: String?
    /** The labels associated with the transfer. */
    public var labels: [String]?

    public init(quoteGuid: String, transferType: TransferTypeBankModel, customerGuid: String? = nil, sourceAccountGuid: String? = nil, sourceParticipants: [PostTransferParticipantBankModel]? = nil, destinationAccountGuid: String? = nil, destinationParticipants: [PostTransferParticipantBankModel]? = nil, externalWalletGuid: String? = nil, externalBankAccountGuid: String? = nil, networkFeeAccountGuid: String? = nil, paymentRail: String? = nil, beneficiaryMemo: String? = nil, labels: [String]? = nil) {
        self.quoteGuid = quoteGuid
        self.transferType = transferType
        self.customerGuid = customerGuid
        self.sourceAccountGuid = sourceAccountGuid
        self.sourceParticipants = sourceParticipants
        self.destinationAccountGuid = destinationAccountGuid
        self.destinationParticipants = destinationParticipants
        self.externalWalletGuid = externalWalletGuid
        self.externalBankAccountGuid = externalBankAccountGuid
        self.networkFeeAccountGuid = networkFeeAccountGuid
        self.paymentRail = paymentRail
        self.beneficiaryMemo = beneficiaryMemo
        self.labels = labels
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case quoteGuid = "quote_guid"
        case transferType = "transfer_type"
        case customerGuid = "customer_guid"
        case sourceAccountGuid = "source_account_guid"
        case sourceParticipants = "source_participants"
        case destinationAccountGuid = "destination_account_guid"
        case destinationParticipants = "destination_participants"
        case externalWalletGuid = "external_wallet_guid"
        case externalBankAccountGuid = "external_bank_account_guid"
        case networkFeeAccountGuid = "network_fee_account_guid"
        case paymentRail = "payment_rail"
        case beneficiaryMemo = "beneficiary_memo"
        case labels
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(quoteGuid, forKey: .quoteGuid)
        try container.encode(transferType, forKey: .transferType)
        try container.encodeIfPresent(customerGuid, forKey: .customerGuid)
        try container.encodeIfPresent(sourceAccountGuid, forKey: .sourceAccountGuid)
        try container.encodeIfPresent(sourceParticipants, forKey: .sourceParticipants)
        try container.encodeIfPresent(destinationAccountGuid, forKey: .destinationAccountGuid)
        try container.encodeIfPresent(destinationParticipants, forKey: .destinationParticipants)
        try container.encodeIfPresent(externalWalletGuid, forKey: .externalWalletGuid)
        try container.encodeIfPresent(externalBankAccountGuid, forKey: .externalBankAccountGuid)
        try container.encodeIfPresent(networkFeeAccountGuid, forKey: .networkFeeAccountGuid)
        try container.encodeIfPresent(paymentRail, forKey: .paymentRail)
        try container.encodeIfPresent(beneficiaryMemo, forKey: .beneficiaryMemo)
        try container.encodeIfPresent(labels, forKey: .labels)
    }
}

