//
// PostTransferBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Request body for transfer creation. */
public struct PostTransferBankModel: Codable, JSONEncodable, Hashable {

    public enum TransferTypeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case funding = "funding"
        case book = "book"
        case crypto = "crypto"
        case instantFunding = "instant_funding"
        case interAccount = "inter_account"
        case lightning = "lightning"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum PaymentRailBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case ach = "ach"
        case eft = "eft"
        case wire = "wire"
        case rtp = "rtp"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** The associated quote's identifier. */
    public var quoteGuid: String
    /** The type of transfer. */
    public var transferType: TransferTypeBankModel
    /** The customer's 'plaid' or 'plaid_processor_token' external bank account's identifier. Required when transfer_type is funding or transfer_type is instant_funding. */
    public var externalBankAccountGuid: String?
    /** The identifier for the fiat account to use for the transfer. Required if the customer or bank has multiple fiat accounts. Optional when transfer_type is funding. */
    public var fiatAccountGuid: String?
    /** The deposit bank account's identifier. Only valid for withdrawals. The deposit bank account must be owned by the customer or bank initiating the transfer. Optional when transfer_type is funding. */
    public var sendAsDepositBankAccountGuid: String?
    /** The desired payment rail to initiate the transfer for. Optional when transfer_type is funding. */
    public var paymentRail: PaymentRailBankModel?
    /** The memo to send to the counterparty. Optional when transfer_type is funding. */
    public var beneficiaryMemo: String?
    /** The source participants for the transfer. Optional when transfer_type is funding, transfer_type is instant_funding, transfer_type is book, transfer_type is crypto, or transfer_type is lightning. */
    public var sourceParticipants: [PostTransferParticipantBankModel]?
    /** The destination participants for the transfer. Optional when transfer_type is funding, transfer_type is instant_funding, transfer_type is book, transfer_type is crypto, or transfer_type is lightning. */
    public var destinationParticipants: [PostTransferParticipantBankModel]?
    /** The optional expected error to simulate transfer failure. Optional when transfer_type is funding, transfer_type is instant_funding, transfer_type is book, transfer_type is crypto, transfer_type is inter_account, or transfer_type is lightning. */
    public var expectedError: String?
    /** The identifier for the fiat account to use for the transfer. Required if the bank has multiple fiat accounts. Optional when transfer_type is instant_funding or transfer_type is lightning. */
    public var bankFiatAccountGuid: String?
    /** The identifier for the fiat account to use for the transfer. Required if the customer has multiple fiat accounts. Optional when transfer_type is instant_funding or transfer_type is lightning. */
    public var customerFiatAccountGuid: String?
    /** The source account's identifier. Required when transfer_type is book or transfer_type is inter_account. */
    public var sourceAccountGuid: String?
    /** The destination account's identifier. Required when transfer_type is book or transfer_type is inter_account. */
    public var destinationAccountGuid: String?
    /** The customer's external wallet's identifier. Required when transfer_type is crypto. */
    public var externalWalletGuid: String?
    /** The customer's identifier. Required when transfer_type is lightning. */
    public var customerGuid: String?
    /** The network fee account's identifier. Required for network fee transfers. Must be the identifier for the customer's or bank's fiat or trading account. For customer's to pay the network fees, include the customer's fiat or trading account guid. For bank's to pay the network fees, include the bank's fiat or trading account guid. Required when transfer_type is lightning. */
    public var networkFeeAccountGuid: String?
    /** The labels associated with the transfer. */
    public var labels: [String]?

    public init(quoteGuid: String, transferType: TransferTypeBankModel, externalBankAccountGuid: String? = nil, fiatAccountGuid: String? = nil, sendAsDepositBankAccountGuid: String? = nil, paymentRail: PaymentRailBankModel? = nil, beneficiaryMemo: String? = nil, sourceParticipants: [PostTransferParticipantBankModel]? = nil, destinationParticipants: [PostTransferParticipantBankModel]? = nil, expectedError: String? = nil, bankFiatAccountGuid: String? = nil, customerFiatAccountGuid: String? = nil, sourceAccountGuid: String? = nil, destinationAccountGuid: String? = nil, externalWalletGuid: String? = nil, customerGuid: String? = nil, networkFeeAccountGuid: String? = nil, labels: [String]? = nil) {
        self.quoteGuid = quoteGuid
        self.transferType = transferType
        self.externalBankAccountGuid = externalBankAccountGuid
        self.fiatAccountGuid = fiatAccountGuid
        self.sendAsDepositBankAccountGuid = sendAsDepositBankAccountGuid
        self.paymentRail = paymentRail
        self.beneficiaryMemo = beneficiaryMemo
        self.sourceParticipants = sourceParticipants
        self.destinationParticipants = destinationParticipants
        self.expectedError = expectedError
        self.bankFiatAccountGuid = bankFiatAccountGuid
        self.customerFiatAccountGuid = customerFiatAccountGuid
        self.sourceAccountGuid = sourceAccountGuid
        self.destinationAccountGuid = destinationAccountGuid
        self.externalWalletGuid = externalWalletGuid
        self.customerGuid = customerGuid
        self.networkFeeAccountGuid = networkFeeAccountGuid
        self.labels = labels
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case quoteGuid = "quote_guid"
        case transferType = "transfer_type"
        case externalBankAccountGuid = "external_bank_account_guid"
        case fiatAccountGuid = "fiat_account_guid"
        case sendAsDepositBankAccountGuid = "send_as_deposit_bank_account_guid"
        case paymentRail = "payment_rail"
        case beneficiaryMemo = "beneficiary_memo"
        case sourceParticipants = "source_participants"
        case destinationParticipants = "destination_participants"
        case expectedError = "expected_error"
        case bankFiatAccountGuid = "bank_fiat_account_guid"
        case customerFiatAccountGuid = "customer_fiat_account_guid"
        case sourceAccountGuid = "source_account_guid"
        case destinationAccountGuid = "destination_account_guid"
        case externalWalletGuid = "external_wallet_guid"
        case customerGuid = "customer_guid"
        case networkFeeAccountGuid = "network_fee_account_guid"
        case labels
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(quoteGuid, forKey: .quoteGuid)
        try container.encode(transferType, forKey: .transferType)
        try container.encodeIfPresent(externalBankAccountGuid, forKey: .externalBankAccountGuid)
        try container.encodeIfPresent(fiatAccountGuid, forKey: .fiatAccountGuid)
        try container.encodeIfPresent(sendAsDepositBankAccountGuid, forKey: .sendAsDepositBankAccountGuid)
        try container.encodeIfPresent(paymentRail, forKey: .paymentRail)
        try container.encodeIfPresent(beneficiaryMemo, forKey: .beneficiaryMemo)
        try container.encodeIfPresent(sourceParticipants, forKey: .sourceParticipants)
        try container.encodeIfPresent(destinationParticipants, forKey: .destinationParticipants)
        try container.encodeIfPresent(expectedError, forKey: .expectedError)
        try container.encodeIfPresent(bankFiatAccountGuid, forKey: .bankFiatAccountGuid)
        try container.encodeIfPresent(customerFiatAccountGuid, forKey: .customerFiatAccountGuid)
        try container.encodeIfPresent(sourceAccountGuid, forKey: .sourceAccountGuid)
        try container.encodeIfPresent(destinationAccountGuid, forKey: .destinationAccountGuid)
        try container.encodeIfPresent(externalWalletGuid, forKey: .externalWalletGuid)
        try container.encodeIfPresent(customerGuid, forKey: .customerGuid)
        try container.encodeIfPresent(networkFeeAccountGuid, forKey: .networkFeeAccountGuid)
        try container.encodeIfPresent(labels, forKey: .labels)
    }
}

