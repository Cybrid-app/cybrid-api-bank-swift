//
// AccountAssociationBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/**  */
public struct AccountAssociationBankModel: Codable, JSONEncodable, Hashable {

    /** Auto-generated unique identifier for the transfer account. */
    public var guid: String
    /** The type of transfer account; one of trading or external_bank_account. */
    public var type: String
    /** The account's bank identifier. */
    public var bankGuid: String?
    /** The account's customer identifier. */
    public var customerGuid: String?
    /** The account's counterparty identifier. */
    public var counterpartyGuid: String?
    /** The account asset, e.g., USD. */
    public var asset: String
    /** The requested amount in base units intended to transfer from or to the account. */
    public var requestedAmount: Int?
    /** The quoted amount in base units to transfer from or to the account. */
    public var quotedAmount: Int?
    /** The executed amount in base units transferred from or to the account. */
    public var executedAmount: Int?

    public init(guid: String, type: String, bankGuid: String? = nil, customerGuid: String? = nil, counterpartyGuid: String? = nil, asset: String, requestedAmount: Int? = nil, quotedAmount: Int? = nil, executedAmount: Int? = nil) {
        self.guid = guid
        self.type = type
        self.bankGuid = bankGuid
        self.customerGuid = customerGuid
        self.counterpartyGuid = counterpartyGuid
        self.asset = asset
        self.requestedAmount = requestedAmount
        self.quotedAmount = quotedAmount
        self.executedAmount = executedAmount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case guid
        case type
        case bankGuid = "bank_guid"
        case customerGuid = "customer_guid"
        case counterpartyGuid = "counterparty_guid"
        case asset
        case requestedAmount = "requested_amount"
        case quotedAmount = "quoted_amount"
        case executedAmount = "executed_amount"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(guid, forKey: .guid)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(bankGuid, forKey: .bankGuid)
        try container.encodeIfPresent(customerGuid, forKey: .customerGuid)
        try container.encodeIfPresent(counterpartyGuid, forKey: .counterpartyGuid)
        try container.encode(asset, forKey: .asset)
        try container.encodeIfPresent(requestedAmount, forKey: .requestedAmount)
        try container.encodeIfPresent(quotedAmount, forKey: .quotedAmount)
        try container.encodeIfPresent(executedAmount, forKey: .executedAmount)
    }
}

