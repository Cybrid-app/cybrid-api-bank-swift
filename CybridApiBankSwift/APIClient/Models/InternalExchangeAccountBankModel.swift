//
// InternalExchangeAccountBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct InternalExchangeAccountBankModel: Codable, JSONEncodable, Hashable {

    public enum TypeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case fiat = "fiat"
        case crypto = "crypto"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** The exchange account type. */
    public var type: TypeBankModel?
    /** Auto-generated unique identifier for exchange account. */
    public var guid: String?
    /** ISO8601 datetime the exchange account was created at. */
    public var createdAt: Date?
    /** The identifier of the exchange that owns this exchange account. */
    public var exchangeGuid: String?
    /** The asset code of the exchange account. */
    public var assetCode: String?

    public init(type: TypeBankModel? = nil, guid: String? = nil, createdAt: Date? = nil, exchangeGuid: String? = nil, assetCode: String? = nil) {
        self.type = type
        self.guid = guid
        self.createdAt = createdAt
        self.exchangeGuid = exchangeGuid
        self.assetCode = assetCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case guid
        case createdAt = "created_at"
        case exchangeGuid = "exchange_guid"
        case assetCode = "asset_code"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(guid, forKey: .guid)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(exchangeGuid, forKey: .exchangeGuid)
        try container.encodeIfPresent(assetCode, forKey: .assetCode)
    }
}

