//
// IdentityVerificationBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct IdentityVerificationBankModel: Codable, JSONEncodable, Hashable {

    public enum TypeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case kyc = "kyc"
        case bankAccount = "bank_account"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum MethodBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case idAndSelfie = "id_and_selfie"
        case attested = "attested"
        case plaidIdentityMatch = "plaid_identity_match"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum StateBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case storing = "storing"
        case waiting = "waiting"
        case expired = "expired"
        case completed = "completed"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum OutcomeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case passed = "passed"
        case failed = "failed"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum FailureCodesBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case requestedFailure = "requested_failure"
        case idCheckFailure = "id_check_failure"
        case databaseCheckFailure = "database_check_failure"
        case selfieFailure = "selfie_failure"
        case pepCheckFailure = "pep_check_failure"
        case mediaCheckFailure = "media_check_failure"
        case watchlistCheckFailure = "watchlist_check_failure"
        case nameCheckFailure = "name_check_failure"
        case addressCheckFailure = "address_check_failure"
        case dobCheckFailure = "dob_check_failure"
        case idNumberCheckFailure = "id_number_check_failure"
        case phoneNumberCheckFailure = "phone_number_check_failure"
        case emailAddressCheckFailure = "email_address_check_failure"
        case decisionTimeout = "decision_timeout"
        case plaidFailure = "plaid_failure"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** Auto-generated unique identifier for the identity verification. */
    public var guid: String?
    /** The customer's identifier. */
    public var customerGuid: String?
    /** The type of identity verification. */
    public var type: TypeBankModel?
    /** The identity verification method. */
    public var method: MethodBankModel?
    /** ISO8601 datetime the customer was created at. */
    public var createdAt: Date?
    /** The state of the verification process. */
    public var state: StateBankModel?
    /** The outcome of the verification process. */
    public var outcome: OutcomeBankModel?
    /** The reason codes explaining the outcome. */
    public var failureCodes: [FailureCodesBankModel]?

    public init(guid: String? = nil, customerGuid: String? = nil, type: TypeBankModel? = nil, method: MethodBankModel? = nil, createdAt: Date? = nil, state: StateBankModel? = nil, outcome: OutcomeBankModel? = nil, failureCodes: [FailureCodesBankModel]? = nil) {
        self.guid = guid
        self.customerGuid = customerGuid
        self.type = type
        self.method = method
        self.createdAt = createdAt
        self.state = state
        self.outcome = outcome
        self.failureCodes = failureCodes
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case guid
        case customerGuid = "customer_guid"
        case type
        case method
        case createdAt = "created_at"
        case state
        case outcome
        case failureCodes = "failure_codes"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(guid, forKey: .guid)
        try container.encodeIfPresent(customerGuid, forKey: .customerGuid)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(method, forKey: .method)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(outcome, forKey: .outcome)
        try container.encodeIfPresent(failureCodes, forKey: .failureCodes)
    }
}

