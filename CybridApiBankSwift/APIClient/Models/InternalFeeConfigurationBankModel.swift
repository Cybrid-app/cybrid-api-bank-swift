//
// InternalFeeConfigurationBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct InternalFeeConfigurationBankModel: Codable, JSONEncodable, Hashable {

    public enum TypeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case platform = "platform"
        case bank = "bank"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum ProductTypeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case trading = "trading"
        case savings = "savings"
        case funding = "funding"
        case cryptoTransfer = "crypto_transfer"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum ProductProviderBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case compound = "compound"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** Auto-generated unique identifier for the configuration. */
    public var guid: String?
    /** The bank identifier. */
    public var bankGuid: String?
    /** The type of configuration. */
    public var type: TypeBankModel?
    /** The type of product being configured. */
    public var productType: ProductTypeBankModel?
    /** The asset code. */
    public var asset: String?
    /** ISO8601 datetime the bank was created at. */
    public var createdAt: Date?
    /** The fees associated with the configuration */
    public var fees: [InternalFeeBankModel]?
    /** The provider for the product being configured. */
    public var productProvider: ProductProviderBankModel?

    public init(guid: String? = nil, bankGuid: String? = nil, type: TypeBankModel? = nil, productType: ProductTypeBankModel? = nil, asset: String? = nil, createdAt: Date? = nil, fees: [InternalFeeBankModel]? = nil, productProvider: ProductProviderBankModel? = nil) {
        self.guid = guid
        self.bankGuid = bankGuid
        self.type = type
        self.productType = productType
        self.asset = asset
        self.createdAt = createdAt
        self.fees = fees
        self.productProvider = productProvider
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case guid
        case bankGuid = "bank_guid"
        case type
        case productType = "product_type"
        case asset
        case createdAt = "created_at"
        case fees
        case productProvider = "product_provider"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(guid, forKey: .guid)
        try container.encodeIfPresent(bankGuid, forKey: .bankGuid)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(productType, forKey: .productType)
        try container.encodeIfPresent(asset, forKey: .asset)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(fees, forKey: .fees)
        try container.encodeIfPresent(productProvider, forKey: .productProvider)
    }
}

