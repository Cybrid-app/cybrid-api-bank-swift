//
// PostBankAccountDetailsBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Bank account details. */
public struct PostBankAccountDetailsBankModel: Codable, JSONEncodable, Hashable {

    public enum BankCodeTypeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case cpa = "CPA"
        case aba = "ABA"
        case clabe = "CLABE"
        case pix = "PIX"
        case cbuCvu = "CBU_CVU"
        case pse = "PSE"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum AccountIdentifierTypeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case clabe = "CLABE"
        case phoneNumber = "PHONE_NUMBER"
        case email = "EMAIL"
        case debitCard = "DEBIT_CARD"
        case cbu = "CBU"
        case cvu = "CVU"
        case random = "RANDOM"
        case cpf = "CPF"
        case cnpj = "CNPJ"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum PaymentRailBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case eft = "EFT"
        case ach = "ACH"
        case rtp = "RTP"
        case wire = "WIRE"
        case spei = "SPEI"
        case pix = "PIX"
        case coelsa = "COELSA"
        case pse = "PSE"
        case unspecified = "UNSPECIFIED"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** The type of bank code. */
    public var bankCodeType: BankCodeTypeBankModel
    /** The bank code. */
    public var bankCode: String?
    /** The account number or unique identifier for the account. */
    public var accountIdentifier: String
    /** The type of account identifier. */
    public var accountIdentifierType: AccountIdentifierTypeBankModel?
    /** The payment rail used for the account. */
    public var paymentRail: PaymentRailBankModel

    public init(bankCodeType: BankCodeTypeBankModel, bankCode: String? = nil, accountIdentifier: String, accountIdentifierType: AccountIdentifierTypeBankModel? = nil, paymentRail: PaymentRailBankModel) {
        self.bankCodeType = bankCodeType
        self.bankCode = bankCode
        self.accountIdentifier = accountIdentifier
        self.accountIdentifierType = accountIdentifierType
        self.paymentRail = paymentRail
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case bankCodeType = "bank_code_type"
        case bankCode = "bank_code"
        case accountIdentifier = "account_identifier"
        case accountIdentifierType = "account_identifier_type"
        case paymentRail = "payment_rail"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(bankCodeType, forKey: .bankCodeType)
        try container.encodeIfPresent(bankCode, forKey: .bankCode)
        try container.encode(accountIdentifier, forKey: .accountIdentifier)
        try container.encodeIfPresent(accountIdentifierType, forKey: .accountIdentifierType)
        try container.encode(paymentRail, forKey: .paymentRail)
    }
}

