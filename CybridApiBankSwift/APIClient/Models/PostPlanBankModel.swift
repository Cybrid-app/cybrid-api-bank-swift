//
// PostPlanBankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Request body for plan creation. */
public struct PostPlanBankModel: Codable, JSONEncodable, Hashable {

    public enum TypeBankModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case remittance = "remittance"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** The type of product the plan is for. */
    public var type: TypeBankModel
    /** The unique identifier for the bank. */
    public var bankGuid: String?
    /** The unique identifier for the customer. */
    public var customerGuid: String?
    public var sourceAccount: PostPlanSourceAccountBankModel
    public var destinationAccount: PostPlanDestinationAccountBankModel
    public var travelRuleInfo: PostPlanTravelRuleInfoBankModel?

    public init(type: TypeBankModel, bankGuid: String? = nil, customerGuid: String? = nil, sourceAccount: PostPlanSourceAccountBankModel, destinationAccount: PostPlanDestinationAccountBankModel, travelRuleInfo: PostPlanTravelRuleInfoBankModel? = nil) {
        self.type = type
        self.bankGuid = bankGuid
        self.customerGuid = customerGuid
        self.sourceAccount = sourceAccount
        self.destinationAccount = destinationAccount
        self.travelRuleInfo = travelRuleInfo
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case bankGuid = "bank_guid"
        case customerGuid = "customer_guid"
        case sourceAccount = "source_account"
        case destinationAccount = "destination_account"
        case travelRuleInfo = "travel_rule_info"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(bankGuid, forKey: .bankGuid)
        try container.encodeIfPresent(customerGuid, forKey: .customerGuid)
        try container.encode(sourceAccount, forKey: .sourceAccount)
        try container.encode(destinationAccount, forKey: .destinationAccount)
        try container.encodeIfPresent(travelRuleInfo, forKey: .travelRuleInfo)
    }
}

