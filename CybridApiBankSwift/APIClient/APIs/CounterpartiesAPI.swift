//
// CounterpartiesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CounterpartiesAPI {

    /**
     Create Counterparty
     
     - parameter postCounterpartyBankModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func createCounterparty(postCounterpartyBankModel: PostCounterpartyBankModel, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<CounterpartyBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return createCounterpartyWithRequestBuilder(postCounterpartyBankModel: postCounterpartyBankModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Create Counterparty
     - POST /api/counterparties
     - Creates a counterparty.  ## Counterparty Type  Counterparty resources are an abstraction for real world individuals and businesses that are not directly on the Cybrid Platform.  ## State  | State | Description | |-------|-------------| | storing | The Platform is storing the counterparty details in our private store | | unverified | The Platform has not yet verified the counterparty's identity | | verified | The Platform has verified the counterparty's identity | | rejected | The Platform was not able to successfully verify the counterparty's identity |    Required scope: **counterparties:execute**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter postCounterpartyBankModel: (body)  
     - returns: RequestBuilder<CounterpartyBankModel> 
     */
    open class func createCounterpartyWithRequestBuilder(postCounterpartyBankModel: PostCounterpartyBankModel) -> RequestBuilder<CounterpartyBankModel> {
        let localVariablePath = "/api/counterparties"
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postCounterpartyBankModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CounterpartyBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Counterparty
     
     - parameter counterpartyGuid: (path) Identifier for the counterparty. 
     - parameter includePii: (query) Include PII in the response. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func getCounterparty(counterpartyGuid: String, includePii: Bool? = nil, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<CounterpartyBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return getCounterpartyWithRequestBuilder(counterpartyGuid: counterpartyGuid, includePii: includePii).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get Counterparty
     - GET /api/counterparties/{counterparty_guid}
     - Retrieves a counterparty.  Required scope: **counterparties:read**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter counterpartyGuid: (path) Identifier for the counterparty. 
     - parameter includePii: (query) Include PII in the response. (optional)
     - returns: RequestBuilder<CounterpartyBankModel> 
     */
    open class func getCounterpartyWithRequestBuilder(counterpartyGuid: String, includePii: Bool? = nil) -> RequestBuilder<CounterpartyBankModel> {
        var localVariablePath = "/api/counterparties/{counterparty_guid}"
        let counterpartyGuidPreEscape = "\(APIHelper.mapValueToPathItem(counterpartyGuid))"
        let counterpartyGuidPostEscape = counterpartyGuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{counterparty_guid}", with: counterpartyGuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "include_pii": includePii?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CounterpartyBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get counterparties list
     
     - parameter page: (query)  (optional)
     - parameter perPage: (query)  (optional)
     - parameter type: (query) Comma separated types to list counterparties for. (optional)
     - parameter bankGuid: (query) Comma separated bank_guids to list counterparties for. (optional)
     - parameter customerGuid: (query) Comma separated customer_guids to list counterparties for. (optional)
     - parameter guid: (query) Comma separated counterparty_guids to list counterparties for. (optional)
     - parameter label: (query) Comma separated labels to list counterparties for. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func listCounterparties(page: Int? = nil, perPage: Int? = nil, type: String? = nil, bankGuid: String? = nil, customerGuid: String? = nil, guid: String? = nil, label: String? = nil, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<CounterpartyListBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return listCounterpartiesWithRequestBuilder(page: page, perPage: perPage, type: type, bankGuid: bankGuid, customerGuid: customerGuid, guid: guid, label: label).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get counterparties list
     - GET /api/counterparties
     - Retrieves a listing of counterparties.  Required scope: **counterparties:read**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter page: (query)  (optional)
     - parameter perPage: (query)  (optional)
     - parameter type: (query) Comma separated types to list counterparties for. (optional)
     - parameter bankGuid: (query) Comma separated bank_guids to list counterparties for. (optional)
     - parameter customerGuid: (query) Comma separated customer_guids to list counterparties for. (optional)
     - parameter guid: (query) Comma separated counterparty_guids to list counterparties for. (optional)
     - parameter label: (query) Comma separated labels to list counterparties for. (optional)
     - returns: RequestBuilder<CounterpartyListBankModel> 
     */
    open class func listCounterpartiesWithRequestBuilder(page: Int? = nil, perPage: Int? = nil, type: String? = nil, bankGuid: String? = nil, customerGuid: String? = nil, guid: String? = nil, label: String? = nil) -> RequestBuilder<CounterpartyListBankModel> {
        let localVariablePath = "/api/counterparties"
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(),
            "per_page": perPage?.encodeToJSON(),
            "type": type?.encodeToJSON(),
            "bank_guid": bankGuid?.encodeToJSON(),
            "customer_guid": customerGuid?.encodeToJSON(),
            "guid": guid?.encodeToJSON(),
            "label": label?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CounterpartyListBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
