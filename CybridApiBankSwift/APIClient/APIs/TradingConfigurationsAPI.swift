//
// TradingConfigurationsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc open class TradingConfigurationsAPI : NSObject {

    /**
     Create TradingConfiguration
     
     - parameter postTradingConfigurationBankModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func createTradingConfiguration(postTradingConfigurationBankModel: PostTradingConfigurationBankModel, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<TradingConfigurationBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return createTradingConfigurationWithRequestBuilder(postTradingConfigurationBankModel: postTradingConfigurationBankModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Create TradingConfiguration
     - POST /api/trading_configurations
     - Creates a trading configuration.  Required scope: **banks:write**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter postTradingConfigurationBankModel: (body)  
     - returns: RequestBuilder<TradingConfigurationBankModel> 
     */
    open class func createTradingConfigurationWithRequestBuilder(postTradingConfigurationBankModel: PostTradingConfigurationBankModel) -> RequestBuilder<TradingConfigurationBankModel> {
        let localVariablePath = "/api/trading_configurations"
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postTradingConfigurationBankModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TradingConfigurationBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get TradingConfiguration
     
     - parameter tradingConfigurationGuid: (path) Identifier for the trading configuration. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func getTradingConfiguration(tradingConfigurationGuid: String, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<TradingConfigurationBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return getTradingConfigurationWithRequestBuilder(tradingConfigurationGuid: tradingConfigurationGuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get TradingConfiguration
     - GET /api/trading_configurations/{trading_configuration_guid}
     - Retrieves a trading configuration.  Required scope: **banks:read**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter tradingConfigurationGuid: (path) Identifier for the trading configuration. 
     - returns: RequestBuilder<TradingConfigurationBankModel> 
     */
    open class func getTradingConfigurationWithRequestBuilder(tradingConfigurationGuid: String) -> RequestBuilder<TradingConfigurationBankModel> {
        var localVariablePath = "/api/trading_configurations/{trading_configuration_guid}"
        let tradingConfigurationGuidPreEscape = "\(APIHelper.mapValueToPathItem(tradingConfigurationGuid))"
        let tradingConfigurationGuidPostEscape = tradingConfigurationGuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{trading_configuration_guid}", with: tradingConfigurationGuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TradingConfigurationBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List trading configurations
     
     - parameter page: (query)  (optional)
     - parameter perPage: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func listTradingConfigurations(page: Int? = nil, perPage: Int? = nil, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<TradingConfigurationListBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return listTradingConfigurationsWithRequestBuilder(page: page, perPage: perPage).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     List trading configurations
     - GET /api/trading_configurations
     - Retrieves a listing of trading configurations for a bank.  Required scope: **banks:read**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter page: (query)  (optional)
     - parameter perPage: (query)  (optional)
     - returns: RequestBuilder<TradingConfigurationListBankModel> 
     */
    open class func listTradingConfigurationsWithRequestBuilder(page: Int? = nil, perPage: Int? = nil) -> RequestBuilder<TradingConfigurationListBankModel> {
        let localVariablePath = "/api/trading_configurations"
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(),
            "per_page": perPage?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TradingConfigurationListBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
