//
// InternalAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc open class InternalAPI : NSObject {

    /**
     Claim Exchange Settlement Expected Payment
     
     - parameter guid: (path) Identifier for the exchange settlement expected payment. 
     - parameter postInternalClaimExchangeSettlementExpectedPaymentBankModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalClaimExchangeSettlementExpectedPayment(guid: String, postInternalClaimExchangeSettlementExpectedPaymentBankModel: PostInternalClaimExchangeSettlementExpectedPaymentBankModel, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<ExchangeSettlementExpectedPaymentBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalClaimExchangeSettlementExpectedPaymentWithRequestBuilder(guid: guid, postInternalClaimExchangeSettlementExpectedPaymentBankModel: postInternalClaimExchangeSettlementExpectedPaymentBankModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Claim Exchange Settlement Expected Payment
     - POST /api/internal/exchange_settlement_expected_payments/{guid}/claim
     - Claim an Exchange Settlement Expected Payments.  Required scope: **internal:exchange_settlements:write**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter guid: (path) Identifier for the exchange settlement expected payment. 
     - parameter postInternalClaimExchangeSettlementExpectedPaymentBankModel: (body)  
     - returns: RequestBuilder<ExchangeSettlementExpectedPaymentBankModel> 
     */
    open class func internalClaimExchangeSettlementExpectedPaymentWithRequestBuilder(guid: String, postInternalClaimExchangeSettlementExpectedPaymentBankModel: PostInternalClaimExchangeSettlementExpectedPaymentBankModel) -> RequestBuilder<ExchangeSettlementExpectedPaymentBankModel> {
        var localVariablePath = "/api/internal/exchange_settlement_expected_payments/{guid}/claim"
        let guidPreEscape = "\(APIHelper.mapValueToPathItem(guid))"
        let guidPostEscape = guidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{guid}", with: guidPostEscape, options: .literal, range: nil)
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postInternalClaimExchangeSettlementExpectedPaymentBankModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExchangeSettlementExpectedPaymentBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Claim Exchange Settlement Payment Order
     
     - parameter guid: (path) Identifier for the exchange settlement expected payment. 
     - parameter postInternalClaimExchangeSettlementPaymentOrderBankModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalClaimExchangeSettlementPaymentOrder(guid: String, postInternalClaimExchangeSettlementPaymentOrderBankModel: PostInternalClaimExchangeSettlementPaymentOrderBankModel, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<ExchangeSettlementPaymentOrderBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalClaimExchangeSettlementPaymentOrderWithRequestBuilder(guid: guid, postInternalClaimExchangeSettlementPaymentOrderBankModel: postInternalClaimExchangeSettlementPaymentOrderBankModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Claim Exchange Settlement Payment Order
     - POST /api/internal/exchange_settlement_payment_orders/{guid}/claim
     - Claim an Exchange Settlement Payment Order.  Required scope: **internal:exchange_settlements:write**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter guid: (path) Identifier for the exchange settlement expected payment. 
     - parameter postInternalClaimExchangeSettlementPaymentOrderBankModel: (body)  
     - returns: RequestBuilder<ExchangeSettlementPaymentOrderBankModel> 
     */
    open class func internalClaimExchangeSettlementPaymentOrderWithRequestBuilder(guid: String, postInternalClaimExchangeSettlementPaymentOrderBankModel: PostInternalClaimExchangeSettlementPaymentOrderBankModel) -> RequestBuilder<ExchangeSettlementPaymentOrderBankModel> {
        var localVariablePath = "/api/internal/exchange_settlement_payment_orders/{guid}/claim"
        let guidPreEscape = "\(APIHelper.mapValueToPathItem(guid))"
        let guidPostEscape = guidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{guid}", with: guidPostEscape, options: .literal, range: nil)
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postInternalClaimExchangeSettlementPaymentOrderBankModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExchangeSettlementPaymentOrderBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create Account
     
     - parameter postInternalAccountBankModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalCreateAccount(postInternalAccountBankModel: PostInternalAccountBankModel, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<AccountBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalCreateAccountWithRequestBuilder(postInternalAccountBankModel: postInternalAccountBankModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Create Account
     - POST /api/internal/accounts
     - Create an Account.  Required scope: **internal:accounts:execute**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter postInternalAccountBankModel: (body)  
     - returns: RequestBuilder<AccountBankModel> 
     */
    open class func internalCreateAccountWithRequestBuilder(postInternalAccountBankModel: PostInternalAccountBankModel) -> RequestBuilder<AccountBankModel> {
        let localVariablePath = "/api/internal/accounts"
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postInternalAccountBankModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create CybridAccount
     
     - parameter postInternalCybridAccountBankModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalCreateCybridAccount(postInternalCybridAccountBankModel: PostInternalCybridAccountBankModel, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<CybridAccountBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalCreateCybridAccountWithRequestBuilder(postInternalCybridAccountBankModel: postInternalCybridAccountBankModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Create CybridAccount
     - POST /api/internal/cybrid_accounts
     - Create a CybridAccount.  Required scope: **internal:cybrid_accounts:execute**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter postInternalCybridAccountBankModel: (body)  
     - returns: RequestBuilder<CybridAccountBankModel> 
     */
    open class func internalCreateCybridAccountWithRequestBuilder(postInternalCybridAccountBankModel: PostInternalCybridAccountBankModel) -> RequestBuilder<CybridAccountBankModel> {
        let localVariablePath = "/api/internal/cybrid_accounts"
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postInternalCybridAccountBankModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CybridAccountBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create Exchange
     
     - parameter postInternalExchangeBankModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalCreateExchange(postInternalExchangeBankModel: PostInternalExchangeBankModel, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<ExchangeBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalCreateExchangeWithRequestBuilder(postInternalExchangeBankModel: postInternalExchangeBankModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Create Exchange
     - POST /api/internal/exchanges
     - Create an Exchanges.  Required scope: **internal:exchanges:execute**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter postInternalExchangeBankModel: (body)  
     - returns: RequestBuilder<ExchangeBankModel> 
     */
    open class func internalCreateExchangeWithRequestBuilder(postInternalExchangeBankModel: PostInternalExchangeBankModel) -> RequestBuilder<ExchangeBankModel> {
        let localVariablePath = "/api/internal/exchanges"
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postInternalExchangeBankModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExchangeBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create ExchangeAccount
     
     - parameter postInternalExchangeAccountBankModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalCreateExchangeAccount(postInternalExchangeAccountBankModel: PostInternalExchangeAccountBankModel, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<ExchangeAccountBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalCreateExchangeAccountWithRequestBuilder(postInternalExchangeAccountBankModel: postInternalExchangeAccountBankModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Create ExchangeAccount
     - POST /api/internal/exchange_accounts
     - Create an ExchangeAccount.  Required scope: **internal:exchange_accounts:execute**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter postInternalExchangeAccountBankModel: (body)  
     - returns: RequestBuilder<ExchangeAccountBankModel> 
     */
    open class func internalCreateExchangeAccountWithRequestBuilder(postInternalExchangeAccountBankModel: PostInternalExchangeAccountBankModel) -> RequestBuilder<ExchangeAccountBankModel> {
        let localVariablePath = "/api/internal/exchange_accounts"
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postInternalExchangeAccountBankModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExchangeAccountBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create Exchange Settlement
     
     - parameter postInternalExchangeSettlementBankModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalCreateExchangeSettlement(postInternalExchangeSettlementBankModel: PostInternalExchangeSettlementBankModel, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<ExchangeSettlementBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalCreateExchangeSettlementWithRequestBuilder(postInternalExchangeSettlementBankModel: postInternalExchangeSettlementBankModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Create Exchange Settlement
     - POST /api/internal/exchange_settlements
     - Create an Exchange Settlements.  Required scope: **internal:exchange_settlements:execute**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter postInternalExchangeSettlementBankModel: (body)  
     - returns: RequestBuilder<ExchangeSettlementBankModel> 
     */
    open class func internalCreateExchangeSettlementWithRequestBuilder(postInternalExchangeSettlementBankModel: PostInternalExchangeSettlementBankModel) -> RequestBuilder<ExchangeSettlementBankModel> {
        let localVariablePath = "/api/internal/exchange_settlements"
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postInternalExchangeSettlementBankModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExchangeSettlementBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create Exchange Settlement Approval
     
     - parameter guid: (path) Identifier for the exchange settlement. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalCreateExchangeSettlementApproval(guid: String, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<InternalCreateExchangeSettlementApproval202ResponseBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalCreateExchangeSettlementApprovalWithRequestBuilder(guid: guid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Create Exchange Settlement Approval
     - POST /api/internal/exchange_settlements/{guid}/approval
     - Queue an Exchange Settlement Approval.  Required scope: **internal:exchange_settlements:write**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter guid: (path) Identifier for the exchange settlement. 
     - returns: RequestBuilder<InternalCreateExchangeSettlementApproval202ResponseBankModel> 
     */
    open class func internalCreateExchangeSettlementApprovalWithRequestBuilder(guid: String) -> RequestBuilder<InternalCreateExchangeSettlementApproval202ResponseBankModel> {
        var localVariablePath = "/api/internal/exchange_settlements/{guid}/approval"
        let guidPreEscape = "\(APIHelper.mapValueToPathItem(guid))"
        let guidPostEscape = guidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{guid}", with: guidPostEscape, options: .literal, range: nil)
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InternalCreateExchangeSettlementApproval202ResponseBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create Exchange Settlement Completion
     
     - parameter guid: (path) Identifier for the exchange settlement. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalCreateExchangeSettlementCompletion(guid: String, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<InternalCreateExchangeSettlementApproval202ResponseBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalCreateExchangeSettlementCompletionWithRequestBuilder(guid: guid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Create Exchange Settlement Completion
     - POST /api/internal/exchange_settlements/{guid}/completion
     - Queue an Exchange Settlement Completion.  Required scope: **internal:exchange_settlements:write**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter guid: (path) Identifier for the exchange settlement. 
     - returns: RequestBuilder<InternalCreateExchangeSettlementApproval202ResponseBankModel> 
     */
    open class func internalCreateExchangeSettlementCompletionWithRequestBuilder(guid: String) -> RequestBuilder<InternalCreateExchangeSettlementApproval202ResponseBankModel> {
        var localVariablePath = "/api/internal/exchange_settlements/{guid}/completion"
        let guidPreEscape = "\(APIHelper.mapValueToPathItem(guid))"
        let guidPostEscape = guidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{guid}", with: guidPostEscape, options: .literal, range: nil)
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InternalCreateExchangeSettlementApproval202ResponseBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create Exchange Settlement Expected Payment
     
     - parameter postInternalExchangeSettlementExpectedPaymentBankModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalCreateExchangeSettlementExpectedPayment(postInternalExchangeSettlementExpectedPaymentBankModel: PostInternalExchangeSettlementExpectedPaymentBankModel, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<ExchangeSettlementExpectedPaymentBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalCreateExchangeSettlementExpectedPaymentWithRequestBuilder(postInternalExchangeSettlementExpectedPaymentBankModel: postInternalExchangeSettlementExpectedPaymentBankModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Create Exchange Settlement Expected Payment
     - POST /api/internal/exchange_settlement_expected_payments
     - Create an Exchange Settlement Expected Payments.  Required scope: **internal:exchange_settlements:execute**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter postInternalExchangeSettlementExpectedPaymentBankModel: (body)  
     - returns: RequestBuilder<ExchangeSettlementExpectedPaymentBankModel> 
     */
    open class func internalCreateExchangeSettlementExpectedPaymentWithRequestBuilder(postInternalExchangeSettlementExpectedPaymentBankModel: PostInternalExchangeSettlementExpectedPaymentBankModel) -> RequestBuilder<ExchangeSettlementExpectedPaymentBankModel> {
        let localVariablePath = "/api/internal/exchange_settlement_expected_payments"
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postInternalExchangeSettlementExpectedPaymentBankModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExchangeSettlementExpectedPaymentBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create Exchange Settlement Payment Order
     
     - parameter postInternalExchangeSettlementPaymentOrderBankModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalCreateExchangeSettlementPaymentOrder(postInternalExchangeSettlementPaymentOrderBankModel: PostInternalExchangeSettlementPaymentOrderBankModel, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<ExchangeSettlementPaymentOrderBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalCreateExchangeSettlementPaymentOrderWithRequestBuilder(postInternalExchangeSettlementPaymentOrderBankModel: postInternalExchangeSettlementPaymentOrderBankModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Create Exchange Settlement Payment Order
     - POST /api/internal/exchange_settlement_payment_orders
     - Create an Exchange Settlement Payment Orders.  Required scope: **internal:exchange_settlements:execute**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter postInternalExchangeSettlementPaymentOrderBankModel: (body)  
     - returns: RequestBuilder<ExchangeSettlementPaymentOrderBankModel> 
     */
    open class func internalCreateExchangeSettlementPaymentOrderWithRequestBuilder(postInternalExchangeSettlementPaymentOrderBankModel: PostInternalExchangeSettlementPaymentOrderBankModel) -> RequestBuilder<ExchangeSettlementPaymentOrderBankModel> {
        let localVariablePath = "/api/internal/exchange_settlement_payment_orders"
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postInternalExchangeSettlementPaymentOrderBankModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExchangeSettlementPaymentOrderBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create ExternalBankAccount
     
     - parameter postInternalExternalBankAccountBankModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalCreateExternalBankAccount(postInternalExternalBankAccountBankModel: PostInternalExternalBankAccountBankModel, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<InternalExternalBankAccountBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalCreateExternalBankAccountWithRequestBuilder(postInternalExternalBankAccountBankModel: postInternalExternalBankAccountBankModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Create ExternalBankAccount
     - POST /api/internal/external_bank_accounts
     - Create an ExternalBankAccount.  Required scope: **internal:accounts:execute**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter postInternalExternalBankAccountBankModel: (body)  
     - returns: RequestBuilder<InternalExternalBankAccountBankModel> 
     */
    open class func internalCreateExternalBankAccountWithRequestBuilder(postInternalExternalBankAccountBankModel: PostInternalExternalBankAccountBankModel) -> RequestBuilder<InternalExternalBankAccountBankModel> {
        let localVariablePath = "/api/internal/external_bank_accounts"
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postInternalExternalBankAccountBankModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InternalExternalBankAccountBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create ExternalWallet
     
     - parameter postInternalExternalWalletBankModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalCreateExternalWallet(postInternalExternalWalletBankModel: PostInternalExternalWalletBankModel, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<InternalExternalWalletBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalCreateExternalWalletWithRequestBuilder(postInternalExternalWalletBankModel: postInternalExternalWalletBankModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Create ExternalWallet
     - POST /api/internal/external_wallets
     - Create an ExternalWallet.  Required scope: **internal:accounts:execute**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter postInternalExternalWalletBankModel: (body)  
     - returns: RequestBuilder<InternalExternalWalletBankModel> 
     */
    open class func internalCreateExternalWalletWithRequestBuilder(postInternalExternalWalletBankModel: PostInternalExternalWalletBankModel) -> RequestBuilder<InternalExternalWalletBankModel> {
        let localVariablePath = "/api/internal/external_wallets"
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postInternalExternalWalletBankModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InternalExternalWalletBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create InternalBankAccount
     
     - parameter postInternalInternalBankAccountBankModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalCreateInternalBankAccount(postInternalInternalBankAccountBankModel: PostInternalInternalBankAccountBankModel, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<InternalInternalBankAccountBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalCreateInternalBankAccountWithRequestBuilder(postInternalInternalBankAccountBankModel: postInternalInternalBankAccountBankModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Create InternalBankAccount
     - POST /api/internal/internal_bank_accounts
     - Create an InternalBankAccount.  Required scope: **internal:accounts:execute**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter postInternalInternalBankAccountBankModel: (body)  
     - returns: RequestBuilder<InternalInternalBankAccountBankModel> 
     */
    open class func internalCreateInternalBankAccountWithRequestBuilder(postInternalInternalBankAccountBankModel: PostInternalInternalBankAccountBankModel) -> RequestBuilder<InternalInternalBankAccountBankModel> {
        let localVariablePath = "/api/internal/internal_bank_accounts"
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postInternalInternalBankAccountBankModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InternalInternalBankAccountBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create InternalWallet
     
     - parameter postInternalInternalWalletBankModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalCreateInternalWallet(postInternalInternalWalletBankModel: PostInternalInternalWalletBankModel, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<InternalInternalWalletBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalCreateInternalWalletWithRequestBuilder(postInternalInternalWalletBankModel: postInternalInternalWalletBankModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Create InternalWallet
     - POST /api/internal/internal_wallets
     - Create an InternalWallet.  Required scope: **internal:accounts:execute**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter postInternalInternalWalletBankModel: (body)  
     - returns: RequestBuilder<InternalInternalWalletBankModel> 
     */
    open class func internalCreateInternalWalletWithRequestBuilder(postInternalInternalWalletBankModel: PostInternalInternalWalletBankModel) -> RequestBuilder<InternalInternalWalletBankModel> {
        let localVariablePath = "/api/internal/internal_wallets"
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postInternalInternalWalletBankModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InternalInternalWalletBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create SystemAccount
     
     - parameter postInternalSystemAccountBankModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalCreateSystemAccount(postInternalSystemAccountBankModel: PostInternalSystemAccountBankModel, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<SystemAccountBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalCreateSystemAccountWithRequestBuilder(postInternalSystemAccountBankModel: postInternalSystemAccountBankModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Create SystemAccount
     - POST /api/internal/system_accounts
     - Create a SystemAccount.  Required scope: **internal:system_accounts:execute**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter postInternalSystemAccountBankModel: (body)  
     - returns: RequestBuilder<SystemAccountBankModel> 
     */
    open class func internalCreateSystemAccountWithRequestBuilder(postInternalSystemAccountBankModel: PostInternalSystemAccountBankModel) -> RequestBuilder<SystemAccountBankModel> {
        let localVariablePath = "/api/internal/system_accounts"
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postInternalSystemAccountBankModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SystemAccountBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create TradingConfiguration
     
     - parameter postTradingConfigurationBankModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalCreateTradingConfiguration(postTradingConfigurationBankModel: PostTradingConfigurationBankModel, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<TradingConfigurationBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalCreateTradingConfigurationWithRequestBuilder(postTradingConfigurationBankModel: postTradingConfigurationBankModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Create TradingConfiguration
     - POST /api/internal/trading_configurations
     - Creates a trading configuration.  Required scope: **internal:banks:write**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter postTradingConfigurationBankModel: (body)  
     - returns: RequestBuilder<TradingConfigurationBankModel> 
     */
    open class func internalCreateTradingConfigurationWithRequestBuilder(postTradingConfigurationBankModel: PostTradingConfigurationBankModel) -> RequestBuilder<TradingConfigurationBankModel> {
        let localVariablePath = "/api/internal/trading_configurations"
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postTradingConfigurationBankModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TradingConfigurationBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create TradingSymbolConfiguration
     
     - parameter postInternalTradingSymbolConfigurationBankModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalCreateTradingSymbolConfiguration(postInternalTradingSymbolConfigurationBankModel: PostInternalTradingSymbolConfigurationBankModel, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<InternalTradingSymbolConfigurationBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalCreateTradingSymbolConfigurationWithRequestBuilder(postInternalTradingSymbolConfigurationBankModel: postInternalTradingSymbolConfigurationBankModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Create TradingSymbolConfiguration
     - POST /api/internal/trading_symbol_configurations
     - Creates a trading symbol configuration.  Required scope: **internal:banks:write**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter postInternalTradingSymbolConfigurationBankModel: (body)  
     - returns: RequestBuilder<InternalTradingSymbolConfigurationBankModel> 
     */
    open class func internalCreateTradingSymbolConfigurationWithRequestBuilder(postInternalTradingSymbolConfigurationBankModel: PostInternalTradingSymbolConfigurationBankModel) -> RequestBuilder<InternalTradingSymbolConfigurationBankModel> {
        let localVariablePath = "/api/internal/trading_symbol_configurations"
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postInternalTradingSymbolConfigurationBankModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InternalTradingSymbolConfigurationBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get CybridAccount
     
     - parameter accountGuid: (path) Identifier for the Cybrid account. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalGetCybridAccount(accountGuid: String, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<CybridAccountBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalGetCybridAccountWithRequestBuilder(accountGuid: accountGuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get CybridAccount
     - GET /api/internal/cybrid_accounts/{account_guid}
     - Get an CybridAccount.  Required scope: **internal:cybrid_accounts:read**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter accountGuid: (path) Identifier for the Cybrid account. 
     - returns: RequestBuilder<CybridAccountBankModel> 
     */
    open class func internalGetCybridAccountWithRequestBuilder(accountGuid: String) -> RequestBuilder<CybridAccountBankModel> {
        var localVariablePath = "/api/internal/cybrid_accounts/{account_guid}"
        let accountGuidPreEscape = "\(APIHelper.mapValueToPathItem(accountGuid))"
        let accountGuidPostEscape = accountGuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_guid}", with: accountGuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CybridAccountBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Exchange
     
     - parameter exchangeGuid: (path) Identifier for the exchange. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalGetExchange(exchangeGuid: String, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<ExchangeBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalGetExchangeWithRequestBuilder(exchangeGuid: exchangeGuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get Exchange
     - GET /api/internal/exchanges/{exchange_guid}
     - Get an Exchange.  Required scope: **internal:exchanges:read**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter exchangeGuid: (path) Identifier for the exchange. 
     - returns: RequestBuilder<ExchangeBankModel> 
     */
    open class func internalGetExchangeWithRequestBuilder(exchangeGuid: String) -> RequestBuilder<ExchangeBankModel> {
        var localVariablePath = "/api/internal/exchanges/{exchange_guid}"
        let exchangeGuidPreEscape = "\(APIHelper.mapValueToPathItem(exchangeGuid))"
        let exchangeGuidPostEscape = exchangeGuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{exchange_guid}", with: exchangeGuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExchangeBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get ExchangeAccount
     
     - parameter accountGuid: (path) Identifier for the bank. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalGetExchangeAccount(accountGuid: String, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<ExchangeAccountBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalGetExchangeAccountWithRequestBuilder(accountGuid: accountGuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get ExchangeAccount
     - GET /api/internal/exchange_accounts/{account_guid}
     - Get an ExchangeAccount.  Required scope: **internal:exchange_accounts:read**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter accountGuid: (path) Identifier for the bank. 
     - returns: RequestBuilder<ExchangeAccountBankModel> 
     */
    open class func internalGetExchangeAccountWithRequestBuilder(accountGuid: String) -> RequestBuilder<ExchangeAccountBankModel> {
        var localVariablePath = "/api/internal/exchange_accounts/{account_guid}"
        let accountGuidPreEscape = "\(APIHelper.mapValueToPathItem(accountGuid))"
        let accountGuidPostEscape = accountGuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_guid}", with: accountGuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExchangeAccountBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Exchange Settlement
     
     - parameter guid: (path) Identifier for the exchange settlement. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalGetExchangeSettlement(guid: String, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<ExchangeSettlementBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalGetExchangeSettlementWithRequestBuilder(guid: guid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get Exchange Settlement
     - GET /api/internal/exchange_settlements/{guid}
     - Get an Exchange Settlement.  Required scope: **internal:exchange_settlements:read**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter guid: (path) Identifier for the exchange settlement. 
     - returns: RequestBuilder<ExchangeSettlementBankModel> 
     */
    open class func internalGetExchangeSettlementWithRequestBuilder(guid: String) -> RequestBuilder<ExchangeSettlementBankModel> {
        var localVariablePath = "/api/internal/exchange_settlements/{guid}"
        let guidPreEscape = "\(APIHelper.mapValueToPathItem(guid))"
        let guidPostEscape = guidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{guid}", with: guidPostEscape, options: .literal, range: nil)
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExchangeSettlementBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Exchange Settlement Expected Payment
     
     - parameter guid: (path) Identifier for the exchange settlement expected payment. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalGetExchangeSettlementExpectedPayment(guid: String, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<ExchangeSettlementExpectedPaymentBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalGetExchangeSettlementExpectedPaymentWithRequestBuilder(guid: guid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get Exchange Settlement Expected Payment
     - GET /api/internal/exchange_settlement_expected_payments/{guid}
     - Get an Exchange Settlement Expected Payment.  Required scope: **internal:exchange_settlements:read**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter guid: (path) Identifier for the exchange settlement expected payment. 
     - returns: RequestBuilder<ExchangeSettlementExpectedPaymentBankModel> 
     */
    open class func internalGetExchangeSettlementExpectedPaymentWithRequestBuilder(guid: String) -> RequestBuilder<ExchangeSettlementExpectedPaymentBankModel> {
        var localVariablePath = "/api/internal/exchange_settlement_expected_payments/{guid}"
        let guidPreEscape = "\(APIHelper.mapValueToPathItem(guid))"
        let guidPostEscape = guidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{guid}", with: guidPostEscape, options: .literal, range: nil)
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExchangeSettlementExpectedPaymentBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Exchange Settlement Obligation
     
     - parameter guid: (path) Identifier for the exchange settlement obligation. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalGetExchangeSettlementObligation(guid: String, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<ExchangeSettlementObligationBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalGetExchangeSettlementObligationWithRequestBuilder(guid: guid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get Exchange Settlement Obligation
     - GET /api/internal/exchange_settlement_obligations/{guid}
     - Get an Exchange Settlement Obligation.  Required scope: **internal:exchange_settlements:read**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter guid: (path) Identifier for the exchange settlement obligation. 
     - returns: RequestBuilder<ExchangeSettlementObligationBankModel> 
     */
    open class func internalGetExchangeSettlementObligationWithRequestBuilder(guid: String) -> RequestBuilder<ExchangeSettlementObligationBankModel> {
        var localVariablePath = "/api/internal/exchange_settlement_obligations/{guid}"
        let guidPreEscape = "\(APIHelper.mapValueToPathItem(guid))"
        let guidPostEscape = guidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{guid}", with: guidPostEscape, options: .literal, range: nil)
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExchangeSettlementObligationBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Exchange Settlement Payment Order
     
     - parameter guid: (path) Identifier for the exchange settlement payment order. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalGetExchangeSettlementPaymentOrder(guid: String, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<ExchangeSettlementPaymentOrderBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalGetExchangeSettlementPaymentOrderWithRequestBuilder(guid: guid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get Exchange Settlement Payment Order
     - GET /api/internal/exchange_settlement_payment_orders/{guid}
     - Get an Exchange Settlement Payment Order.  Required scope: **internal:exchange_settlements:read**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter guid: (path) Identifier for the exchange settlement payment order. 
     - returns: RequestBuilder<ExchangeSettlementPaymentOrderBankModel> 
     */
    open class func internalGetExchangeSettlementPaymentOrderWithRequestBuilder(guid: String) -> RequestBuilder<ExchangeSettlementPaymentOrderBankModel> {
        var localVariablePath = "/api/internal/exchange_settlement_payment_orders/{guid}"
        let guidPreEscape = "\(APIHelper.mapValueToPathItem(guid))"
        let guidPostEscape = guidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{guid}", with: guidPostEscape, options: .literal, range: nil)
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExchangeSettlementPaymentOrderBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List Exchanges
     
     - parameter page: (query)  (optional)
     - parameter perPage: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalListExchanges(page: Int? = nil, perPage: Int? = nil, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<ExchangeListBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalListExchangesWithRequestBuilder(page: page, perPage: perPage).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     List Exchanges
     - GET /api/internal/exchanges
     - Retrieves a listing of exchanges.  Required scope: **internal:exchanges:read**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter page: (query)  (optional)
     - parameter perPage: (query)  (optional)
     - returns: RequestBuilder<ExchangeListBankModel> 
     */
    open class func internalListExchangesWithRequestBuilder(page: Int? = nil, perPage: Int? = nil) -> RequestBuilder<ExchangeListBankModel> {
        let localVariablePath = "/api/internal/exchanges"
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(),
            "per_page": perPage?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExchangeListBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List ExternalBankAccounts
     
     - parameter page: (query)  (optional)
     - parameter perPage: (query)  (optional)
     - parameter asset: (query) Comma separated assets to list bank accounts for. (optional)
     - parameter bankGuid: (query) Comma separated bank_guids to list bank accounts for. (optional)
     - parameter exchangeGuid: (query) Comma separated exchange_guids to list bank accounts for. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalListExternalBankAccounts(page: Int? = nil, perPage: Int? = nil, asset: String? = nil, bankGuid: String? = nil, exchangeGuid: String? = nil, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<InternalExternalBankAccountListBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalListExternalBankAccountsWithRequestBuilder(page: page, perPage: perPage, asset: asset, bankGuid: bankGuid, exchangeGuid: exchangeGuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     List ExternalBankAccounts
     - GET /api/internal/external_bank_accounts
     - Retrieves a listing of external bank accounts.  Required scope: **internal:accounts:read**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter page: (query)  (optional)
     - parameter perPage: (query)  (optional)
     - parameter asset: (query) Comma separated assets to list bank accounts for. (optional)
     - parameter bankGuid: (query) Comma separated bank_guids to list bank accounts for. (optional)
     - parameter exchangeGuid: (query) Comma separated exchange_guids to list bank accounts for. (optional)
     - returns: RequestBuilder<InternalExternalBankAccountListBankModel> 
     */
    open class func internalListExternalBankAccountsWithRequestBuilder(page: Int? = nil, perPage: Int? = nil, asset: String? = nil, bankGuid: String? = nil, exchangeGuid: String? = nil) -> RequestBuilder<InternalExternalBankAccountListBankModel> {
        let localVariablePath = "/api/internal/external_bank_accounts"
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(),
            "per_page": perPage?.encodeToJSON(),
            "asset": asset?.encodeToJSON(),
            "bank_guid": bankGuid?.encodeToJSON(),
            "exchange_guid": exchangeGuid?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InternalExternalBankAccountListBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List ExternalWallets
     
     - parameter page: (query)  (optional)
     - parameter perPage: (query)  (optional)
     - parameter asset: (query) Comma separated assets to list wallets for. (optional)
     - parameter exchangeGuid: (query) Comma separated exchange_guids to list wallets for. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalListExternalWallets(page: Int? = nil, perPage: Int? = nil, asset: String? = nil, exchangeGuid: String? = nil, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<InternalExternalWalletListBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalListExternalWalletsWithRequestBuilder(page: page, perPage: perPage, asset: asset, exchangeGuid: exchangeGuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     List ExternalWallets
     - GET /api/internal/external_wallets
     - Retrieves a listing of external wallets.  Required scope: **internal:accounts:read**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter page: (query)  (optional)
     - parameter perPage: (query)  (optional)
     - parameter asset: (query) Comma separated assets to list wallets for. (optional)
     - parameter exchangeGuid: (query) Comma separated exchange_guids to list wallets for. (optional)
     - returns: RequestBuilder<InternalExternalWalletListBankModel> 
     */
    open class func internalListExternalWalletsWithRequestBuilder(page: Int? = nil, perPage: Int? = nil, asset: String? = nil, exchangeGuid: String? = nil) -> RequestBuilder<InternalExternalWalletListBankModel> {
        let localVariablePath = "/api/internal/external_wallets"
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(),
            "per_page": perPage?.encodeToJSON(),
            "asset": asset?.encodeToJSON(),
            "exchange_guid": exchangeGuid?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InternalExternalWalletListBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List InternalBankAccounts
     
     - parameter page: (query)  (optional)
     - parameter perPage: (query)  (optional)
     - parameter asset: (query) Comma separated assets to list bank accounts for. (optional)
     - parameter accountKind: (query) Comma separated account kinds to list bank accounts for. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalListInternalBankAccounts(page: Int? = nil, perPage: Int? = nil, asset: String? = nil, accountKind: String? = nil, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<InternalInternalBankAccountListBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalListInternalBankAccountsWithRequestBuilder(page: page, perPage: perPage, asset: asset, accountKind: accountKind).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     List InternalBankAccounts
     - GET /api/internal/internal_bank_accounts
     - Retrieves a listing of internal bank accounts.  Required scope: **internal:accounts:read**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter page: (query)  (optional)
     - parameter perPage: (query)  (optional)
     - parameter asset: (query) Comma separated assets to list bank accounts for. (optional)
     - parameter accountKind: (query) Comma separated account kinds to list bank accounts for. (optional)
     - returns: RequestBuilder<InternalInternalBankAccountListBankModel> 
     */
    open class func internalListInternalBankAccountsWithRequestBuilder(page: Int? = nil, perPage: Int? = nil, asset: String? = nil, accountKind: String? = nil) -> RequestBuilder<InternalInternalBankAccountListBankModel> {
        let localVariablePath = "/api/internal/internal_bank_accounts"
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(),
            "per_page": perPage?.encodeToJSON(),
            "asset": asset?.encodeToJSON(),
            "account_kind": accountKind?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InternalInternalBankAccountListBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List InternalWallets
     
     - parameter page: (query)  (optional)
     - parameter perPage: (query)  (optional)
     - parameter asset: (query) Comma separated assets to list wallets for. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalListInternalWallets(page: Int? = nil, perPage: Int? = nil, asset: String? = nil, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<InternalInternalWalletListBankModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalListInternalWalletsWithRequestBuilder(page: page, perPage: perPage, asset: asset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     List InternalWallets
     - GET /api/internal/internal_wallets
     - Retrieves a listing of internal wallets.  Required scope: **internal:accounts:read**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter page: (query)  (optional)
     - parameter perPage: (query)  (optional)
     - parameter asset: (query) Comma separated assets to list wallets for. (optional)
     - returns: RequestBuilder<InternalInternalWalletListBankModel> 
     */
    open class func internalListInternalWalletsWithRequestBuilder(page: Int? = nil, perPage: Int? = nil, asset: String? = nil) -> RequestBuilder<InternalInternalWalletListBankModel> {
        let localVariablePath = "/api/internal/internal_wallets"
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(),
            "per_page": perPage?.encodeToJSON(),
            "asset": asset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InternalInternalWalletListBankModel>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter environment
     */
    public enum EnvironmentBankModel_internalListTransactions: String, CaseIterable {
        case sandbox = "sandbox"
        case production = "production"
    }

    /**
     * enum for parameter accountType
     */
    public enum AccountTypeBankModel_internalListTransactions: String, CaseIterable {
        case wallet = "internal_wallet"
        case bankAccount = "internal_bank_account"
    }

    /**
     List Transactions
     
     - parameter environment: (query)  
     - parameter accountGuid: (query)  
     - parameter accountType: (query)  
     - parameter page: (query)  (optional)
     - parameter perPage: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalListTransactions(environment: EnvironmentBankModel_internalListTransactions, accountGuid: String, accountType: AccountTypeBankModel_internalListTransactions, page: Int? = nil, perPage: Int? = nil, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<[InternalTransactionBankModel], ErrorResponse>) -> Void)) -> RequestTask {
        return internalListTransactionsWithRequestBuilder(environment: environment, accountGuid: accountGuid, accountType: accountType, page: page, perPage: perPage).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     List Transactions
     - GET /api/internal/transactions
     - Retrieves a listing of transactions.  Required scope: **internal:transfers:read**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter environment: (query)  
     - parameter accountGuid: (query)  
     - parameter accountType: (query)  
     - parameter page: (query)  (optional)
     - parameter perPage: (query)  (optional)
     - returns: RequestBuilder<[InternalTransactionBankModel]> 
     */
    open class func internalListTransactionsWithRequestBuilder(environment: EnvironmentBankModel_internalListTransactions, accountGuid: String, accountType: AccountTypeBankModel_internalListTransactions, page: Int? = nil, perPage: Int? = nil) -> RequestBuilder<[InternalTransactionBankModel]> {
        let localVariablePath = "/api/internal/transactions"
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(),
            "per_page": perPage?.encodeToJSON(),
            "environment": environment.encodeToJSON(),
            "account_guid": accountGuid.encodeToJSON(),
            "account_type": accountType.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[InternalTransactionBankModel]>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
