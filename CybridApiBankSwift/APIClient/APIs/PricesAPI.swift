//
// PricesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PricesAPI {

    /**
     Get Price
     
     - parameter symbol: (query) Comma separated trading symbols to list prices for. (optional)
     - parameter tradingSymbol: (query) Comma separated trading symbols to list prices for. (optional)
     - parameter payoutSymbol: (query) Comma separated payout symbols to list prices for. (optional)
     - parameter payoutCountryCode: (query) Comma separated payout country codes to list prices for. (optional)
     - parameter payoutParticipantsType: (query) Comma separated payout participants types to list prices for. (optional)
     - parameter payoutRoute: (query) Comma separated payout routes to list prices for. (optional)
     - parameter bankGuid: (query) The bank identifier to retrieve prices for. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func listPrices(symbol: String? = nil, tradingSymbol: String? = nil, payoutSymbol: String? = nil, payoutCountryCode: String? = nil, payoutParticipantsType: String? = nil, payoutRoute: String? = nil, bankGuid: String? = nil, apiResponseQueue: DispatchQueue = CybridApiBankSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<[SymbolPriceBankModel], ErrorResponse>) -> Void)) -> RequestTask {
        return listPricesWithRequestBuilder(symbol: symbol, tradingSymbol: tradingSymbol, payoutSymbol: payoutSymbol, payoutCountryCode: payoutCountryCode, payoutParticipantsType: payoutParticipantsType, payoutRoute: payoutRoute, bankGuid: bankGuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get Price
     - GET /api/prices
     - Retrieves a listing of symbol prices.  ## Symbols  Symbol are pairs and are in the format asset-counter_asset, e.g., 'BTC-USD' for the Bitcoin/ USD pair. See the Symbols API for a complete list of cryptocurrencies supported.    Required scope: **prices:read**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter symbol: (query) Comma separated trading symbols to list prices for. (optional)
     - parameter tradingSymbol: (query) Comma separated trading symbols to list prices for. (optional)
     - parameter payoutSymbol: (query) Comma separated payout symbols to list prices for. (optional)
     - parameter payoutCountryCode: (query) Comma separated payout country codes to list prices for. (optional)
     - parameter payoutParticipantsType: (query) Comma separated payout participants types to list prices for. (optional)
     - parameter payoutRoute: (query) Comma separated payout routes to list prices for. (optional)
     - parameter bankGuid: (query) The bank identifier to retrieve prices for. (optional)
     - returns: RequestBuilder<[SymbolPriceBankModel]> 
     */
    open class func listPricesWithRequestBuilder(symbol: String? = nil, tradingSymbol: String? = nil, payoutSymbol: String? = nil, payoutCountryCode: String? = nil, payoutParticipantsType: String? = nil, payoutRoute: String? = nil, bankGuid: String? = nil) -> RequestBuilder<[SymbolPriceBankModel]> {
        let localVariablePath = "/api/prices"
        let localVariableURLString = CybridApiBankSwiftAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "symbol": symbol?.encodeToJSON(),
            "trading_symbol": tradingSymbol?.encodeToJSON(),
            "payout_symbol": payoutSymbol?.encodeToJSON(),
            "payout_country_code": payoutCountryCode?.encodeToJSON(),
            "payout_participants_type": payoutParticipantsType?.encodeToJSON(),
            "payout_route": payoutRoute?.encodeToJSON(),
            "bank_guid": bankGuid?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[SymbolPriceBankModel]>.Type = CybridApiBankSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
